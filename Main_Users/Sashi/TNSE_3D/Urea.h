// Navier-Stokes problem, Driven cavity
//
// u(x,y) = unknown
// p(x,y) = unknown

#define __UREA__

#include <Urea_3d4d.h>

void ExampleFile()
{

  TDatabase::ParamDB->N_CELL_LAYERS = 3;
  TDatabase::ParamDB->DRIFT_Z = 1;
  TDatabase::ParamDB->INTERNAL_PROBLEM_IDENTITY = 1356;
  
#ifdef _MPI
 MPI_Comm Comm;
 int rank;

 Comm = TDatabase::ParamDB->Comm;
 MPI_Comm_rank(Comm, &rank);

 if(rank==TDatabase::ParamDB->Par_P0)
#endif
 {
  OutPut("Example: Urea.h " << endl);

  OutPut("UREA_REACTION_DISC: " << TDatabase::ParamDB->UREA_REACTION_DISC << endl);
  OutPut("UREA_PB_DISC: " << TDatabase::ParamDB->UREA_PB_DISC << endl);
  OutPut("UREA_PB_DISC_STAB: " << TDatabase::ParamDB->UREA_PB_DISC_STAB<<endl);
  OutPut("UREA_SOLD_PARAMETER_TYPE: "<< TDatabase::ParamDB->UREA_SOLD_PARAMETER_TYPE <<endl);
  OutPut("UREA_MODEL: " << TDatabase::ParamDB->UREA_MODEL << endl);
  OutPut("UREA_CONC_TOL: " << TDatabase::ParamDB->UREA_CONC_TOL << endl);
  OutPut("UREA_CONC_MAXIT: " << TDatabase::ParamDB->UREA_CONC_MAXIT << endl);

  OutPut("UREA_l_infty: " << TDatabase::ParamDB->UREA_l_infty <<endl);
  OutPut("UREA_u_infty: " << TDatabase::ParamDB->UREA_u_infty <<endl);
  OutPut("UREA_c_infty: " << TDatabase::ParamDB->UREA_c_infty <<endl);
  OutPut("UREA_temp_infty: " << TDatabase::ParamDB->UREA_temp_infty <<endl);
  OutPut("UREA_f_infty: " << TDatabase::ParamDB->UREA_f_infty<<endl);
  OutPut("UREA_nu: " << TDatabase::ParamDB->UREA_nu<<endl); 
  OutPut("UREA_rho: " << TDatabase::ParamDB->UREA_rho<<endl);
  OutPut("UREA_c_p: " << TDatabase::ParamDB->UREA_c_p<<endl);
  OutPut("UREA_lambda: " << TDatabase::ParamDB->UREA_lambda<<endl); 
  OutPut("UREA_D_P_0: " << TDatabase::ParamDB->UREA_D_P_0<<endl); 
  OutPut("UREA_D_P_MAX: " << TDatabase::ParamDB->UREA_D_P_MAX <<endl);
  OutPut("UREA_k_v: " << TDatabase::ParamDB->UREA_k_v<<endl); 
  OutPut("UREA_m_mol: " << TDatabase::ParamDB->UREA_m_mol<<endl);
  OutPut("UREA_D_J: " << TDatabase::ParamDB->UREA_D_J<<endl);
  OutPut("UREA_rho_d: " << TDatabase::ParamDB->UREA_rho_d <<endl);
  OutPut("UREA_k_g: " << TDatabase::ParamDB->UREA_k_g<<endl);
  OutPut("UREA_g: " << TDatabase::ParamDB->UREA_g <<endl);
  OutPut("UREA_rho_sat_1: " << TDatabase::ParamDB->UREA_rho_sat_1 <<endl);
  OutPut("UREA_rho_sat_2: " << TDatabase::ParamDB->UREA_rho_sat_2<<endl); 
  OutPut("UREA_beta_nuc: " << TDatabase::ParamDB->UREA_beta_nuc<<endl); 
  OutPut("UREA_alfa_nuc: " << TDatabase::ParamDB->UREA_alfa_nuc<<endl); 
  OutPut("UREA_INFLOW_SCALE: " << TDatabase::ParamDB->UREA_INFLOW_SCALE <<endl);
  OutPut("UREA_inflow_time: " << TDatabase::ParamDB->UREA_inflow_time <<endl);
 }

  // set some parameters
  //TDatabase::ParamDB->GRID_TYPE = 3;
  //OutPut("GRID_TYPE set to " << TDatabase::ParamDB->GRID_TYPE << endl);
}

// ========================================================================
// inflow condition from Poisson solve with right hand side f=1 in [0,1]^2
// solution stored only for [0,0.5]^2
// ========================================================================

double DirichletDataFromPoissonSolve(double x0, double y0, double z0)
{
    int n = 51;

double y[51] = { 3.33333333e-01, 3.36666667e-01, 3.40000000e-01, 3.43333333e-01, 3.46666667e-01, 3.50000000e-01, 3.53333333e-01, 3.56666667e-01, 3.60000000e-01, 3.63333333e-01, 3.66666667e-01, 3.70000000e-01, 3.73333333e-01, 3.76666667e-01, 3.80000000e-01, 3.83333333e-01, 3.86666667e-01, 3.90000000e-01, 3.93333333e-01, 3.96666667e-01, 4.00000000e-01, 4.03333333e-01, 4.06666667e-01, 4.10000000e-01, 4.13333333e-01, 4.16666667e-01, 4.20000000e-01, 4.23333333e-01, 4.26666667e-01, 4.30000000e-01, 4.33333333e-01, 4.36666667e-01, 4.40000000e-01, 4.43333333e-01, 4.46666667e-01, 4.50000000e-01, 4.53333333e-01, 4.56666667e-01, 4.60000000e-01, 4.63333333e-01, 4.66666667e-01, 4.70000000e-01, 4.73333333e-01, 4.76666667e-01, 4.80000000e-01, 4.83333333e-01, 4.86666667e-01, 4.90000000e-01, 4.93333333e-01, 4.96666667e-01, 5.00000000e-01 };
double z[51] = { 3.33333333e-01, 3.36666667e-01, 3.40000000e-01, 3.43333333e-01, 3.46666667e-01, 3.50000000e-01, 3.53333333e-01, 3.56666667e-01, 3.60000000e-01, 3.63333333e-01, 3.66666667e-01, 3.70000000e-01, 3.73333333e-01, 3.76666667e-01, 3.80000000e-01, 3.83333333e-01, 3.86666667e-01, 3.90000000e-01, 3.93333333e-01, 3.96666667e-01, 4.00000000e-01, 4.03333333e-01, 4.06666667e-01, 4.10000000e-01, 4.13333333e-01, 4.16666667e-01, 4.20000000e-01, 4.23333333e-01, 4.26666667e-01, 4.30000000e-01, 4.33333333e-01, 4.36666667e-01, 4.40000000e-01, 4.43333333e-01, 4.46666667e-01, 4.50000000e-01, 4.53333333e-01, 4.56666667e-01, 4.60000000e-01, 4.63333333e-01, 4.66666667e-01, 4.70000000e-01, 4.73333333e-01, 4.76666667e-01, 4.80000000e-01, 4.83333333e-01, 4.86666667e-01, 4.90000000e-01, 4.93333333e-01, 4.96666667e-01, 5.00000000e-01 };
double u1[2601] = { 7.72092986e-30 , 1.83570180e-16 , 3.14547608e-16 , 4.27274829e-16 , 5.30265254e-16 , 6.21770134e-16 , 7.02245417e-16 , 7.79769524e-16 , 8.56441551e-16 , 9.19727132e-16 , 9.83332051e-16 , 1.04866175e-15 , 1.10555569e-15 , 1.15340660e-15 , 1.20412367e-15 , 1.25870187e-15 , 1.30458507e-15 , 1.34121114e-15 , 1.38955753e-15 , 1.42889985e-15 , 1.45873149e-15 , 1.49408392e-15 , 1.53559551e-15 , 1.56767006e-15 , 1.58987836e-15 , 1.62281934e-15 , 1.65441000e-15 , 1.67168642e-15 , 1.69610785e-15 , 1.72810093e-15 , 1.74998396e-15 , 1.76145403e-15 , 1.78072211e-15 , 1.80812136e-15 , 1.81568194e-15 , 1.83142946e-15 , 1.85563477e-15 , 1.86923197e-15 , 1.87202987e-15 , 1.88341721e-15 , 1.90358887e-15 , 1.91295231e-15 , 1.91137523e-15 , 1.92862910e-15 , 1.93496469e-15 , 1.93029227e-15 , 1.93463363e-15 , 1.94806271e-15 , 1.95047936e-15 , 1.94184931e-15 , 1.94737008e-15 , 
1.82659237e-16 , 6.39116457e-03 , 1.15698282e-02 , 1.60476707e-02 , 2.00458361e-02 , 2.36810900e-02 , 2.70248673e-02 , 3.01252288e-02 , 3.30166751e-02 , 3.57251576e-02 , 3.82708967e-02 , 4.06700850e-02 , 4.29359773e-02 , 4.50796194e-02 , 4.71103539e-02 , 4.90361827e-02 , 5.08640322e-02 , 5.25999533e-02 , 5.42492737e-02 , 5.58167168e-02 , 5.73064952e-02 , 5.87223856e-02 , 6.00677899e-02 , 6.13457838e-02 , 6.25591585e-02 , 6.37104541e-02 , 6.48019883e-02 , 6.58358803e-02 , 6.68140715e-02 , 6.77383423e-02 , 6.86103276e-02 , 6.94315293e-02 , 7.02033277e-02 , 7.09269907e-02 , 7.16036830e-02 , 7.22344726e-02 , 7.28203379e-02 , 7.33621727e-02 , 7.38607917e-02 , 7.43169347e-02 , 7.47312698e-02 , 7.51043978e-02 , 7.54368541e-02 , 7.57291115e-02 , 7.59815827e-02 , 7.61946217e-02 , 7.63685257e-02 , 7.65035359e-02 , 7.65998391e-02 , 7.66575680e-02 , 7.66768022e-02 , 
3.16144724e-16 , 1.15698282e-02 , 2.14965157e-02 , 3.02555427e-02 , 3.81430241e-02 , 4.53452512e-02 , 5.19862197e-02 , 5.81532164e-02 , 6.39106008e-02 , 6.93076170e-02 , 7.43830776e-02 , 7.91683174e-02 , 8.36891385e-02 , 8.79671389e-02 , 9.20206497e-02 , 9.58654134e-02 , 9.95150867e-02 , 1.02981621e-01 , 1.06275554e-01 , 1.09406240e-01 , 1.12382030e-01 , 1.15210417e-01 , 1.17898156e-01 , 1.20451359e-01 , 1.22875573e-01 , 1.25175850e-01 , 1.27356803e-01 , 1.29422648e-01 , 1.31377253e-01 , 1.33224162e-01 , 1.34966632e-01 , 1.36607657e-01 , 1.38149987e-01 , 1.39596150e-01 , 1.40948467e-01 , 1.42209069e-01 , 1.43379906e-01 , 1.44462762e-01 , 1.45459261e-01 , 1.46370879e-01 , 1.47198950e-01 , 1.47944671e-01 , 1.48609110e-01 , 1.49193213e-01 , 1.49697802e-01 , 1.50123583e-01 , 1.50471150e-01 , 1.50740983e-01 , 1.50933457e-01 , 1.51048835e-01 , 1.51087277e-01 , 
4.29459124e-16 , 1.60476707e-02 , 3.02555427e-02 , 4.30128123e-02 , 5.46108969e-02 , 6.52600678e-02 , 7.51130880e-02 , 8.42835911e-02 , 9.28584147e-02 , 1.00905626e-01 , 1.08479787e-01 , 1.15625492e-01 , 1.22379796e-01 , 1.28773935e-01 , 1.34834562e-01 , 1.40584666e-01 , 1.46044260e-01 , 1.51230907e-01 , 1.56160128e-01 , 1.60845730e-01 , 1.65300057e-01 , 1.69534204e-01 , 1.73558180e-01 , 1.77381053e-01 , 1.81011064e-01 , 1.84455719e-01 , 1.87721878e-01 , 1.90815819e-01 , 1.93743295e-01 , 1.96509589e-01 , 1.99119556e-01 , 2.01577656e-01 , 2.03887992e-01 , 2.06054336e-01 , 2.08080151e-01 , 2.09968616e-01 , 2.11722644e-01 , 2.13344897e-01 , 2.14837802e-01 , 2.16203562e-01 , 2.17444171e-01 , 2.18561417e-01 , 2.19556898e-01 , 2.20432023e-01 , 2.21188023e-01 , 2.21825954e-01 , 2.22346702e-01 , 2.22750987e-01 , 2.23039366e-01 , 2.23212235e-01 , 2.23269832e-01 , 
5.27558423e-16 , 2.00458361e-02 , 3.81430241e-02 , 5.46108969e-02 , 6.97135063e-02 , 8.36599012e-02 , 9.66133383e-02 , 1.08701804e-01 , 1.20026851e-01 , 1.30670265e-01 , 1.40698929e-01 , 1.50168323e-01 , 1.59125079e-01 , 1.67608851e-01 , 1.75653718e-01 , 1.83289238e-01 , 1.90541258e-01 , 1.97432547e-01 , 2.03983294e-01 , 2.10211500e-01 , 2.16133300e-01 , 2.21763217e-01 , 2.27114382e-01 , 2.32198703e-01 , 2.37027015e-01 , 2.41609202e-01 , 2.45954300e-01 , 2.50070588e-01 , 2.53965660e-01 , 2.57646493e-01 , 2.61119499e-01 , 2.64390577e-01 , 2.67465153e-01 , 2.70348217e-01 , 2.73044353e-01 , 2.75557772e-01 , 2.77892331e-01 , 2.80051556e-01 , 2.82038665e-01 , 2.83856578e-01 , 2.85507936e-01 , 2.86995112e-01 , 2.88320224e-01 , 2.89485142e-01 , 2.90491498e-01 , 2.91340693e-01 , 2.92033903e-01 , 2.92572083e-01 , 2.92955972e-01 , 2.93186095e-01 , 2.93262768e-01 , 
6.18588909e-16 , 2.36810900e-02 , 4.53452512e-02 , 6.52600678e-02 , 8.36599012e-02 , 1.00742086e-01 , 1.16669431e-01 , 1.31575407e-01 , 1.45569684e-01 , 1.58742996e-01 , 1.71171098e-01 , 1.82917857e-01 , 1.94037637e-01 , 2.04577140e-01 , 2.14576823e-01 , 2.24072013e-01 , 2.33093771e-01 , 2.41669581e-01 , 2.49823905e-01 , 2.57578624e-01 , 2.64953405e-01 , 2.71965994e-01 , 2.78632463e-01 , 2.84967418e-01 , 2.90984164e-01 , 2.96694860e-01 , 3.02110632e-01 , 3.07241684e-01 , 3.12097386e-01 , 3.16686351e-01 , 3.21016505e-01 , 3.25095142e-01 , 3.28928973e-01 , 3.32524175e-01 , 3.35886428e-01 , 3.39020947e-01 , 3.41932512e-01 , 3.44625497e-01 , 3.47103891e-01 , 3.49371317e-01 , 3.51431053e-01 , 3.53286043e-01 , 3.54938918e-01 , 3.56391998e-01 , 3.57647310e-01 , 3.58706595e-01 , 3.59571312e-01 , 3.60242648e-01 , 3.60721521e-01 , 3.61008584e-01 , 3.61104229e-01 , 
7.05862640e-16 , 2.70248673e-02 , 5.19862197e-02 , 7.51130880e-02 , 9.66133383e-02 , 1.16669431e-01 , 1.35438159e-01 , 1.53052796e-01 , 1.69626222e-01 , 1.85254187e-01 , 2.00018255e-01 , 2.13988318e-01 , 2.27224656e-01 , 2.39779611e-01 , 2.51698929e-01 , 2.63022843e-01 , 2.73786944e-01 , 2.84022887e-01 , 2.93758965e-01 , 3.03020582e-01 , 3.11830640e-01 , 3.20209861e-01 , 3.28177058e-01 , 3.35749362e-01 , 3.42942408e-01 , 3.49770502e-01 , 3.56246759e-01 , 3.62383217e-01 , 3.68190946e-01 , 3.73680130e-01 , 3.78860147e-01 , 3.83739636e-01 , 3.88326552e-01 , 3.92628220e-01 , 3.96651379e-01 , 4.00402220e-01 , 4.03886423e-01 , 4.07109183e-01 , 4.10075240e-01 , 4.12788905e-01 , 4.15254075e-01 , 4.17474254e-01 , 4.19452570e-01 , 4.21191787e-01 , 4.22694317e-01 , 4.23962232e-01 , 4.24997270e-01 , 4.25800845e-01 , 4.26374050e-01 , 4.26717663e-01 , 4.26832148e-01 , 
7.83790804e-16 , 3.01252288e-02 , 5.81532164e-02 , 8.42835911e-02 , 1.08701804e-01 , 1.31575407e-01 , 1.53052796e-01 , 1.73263761e-01 , 1.92321085e-01 , 2.10322555e-01 , 2.27353041e-01 , 2.43486403e-01 , 2.58787180e-01 , 2.73312019e-01 , 2.87110883e-01 , 3.00228047e-01 , 3.12702932e-01 , 3.24570792e-01 , 3.35863286e-01 , 3.46608951e-01 , 3.56833607e-01 , 3.66560684e-01 , 3.75811512e-01 , 3.84605556e-01 , 3.92960618e-01 , 4.00893017e-01 , 4.08417735e-01 , 4.15548547e-01 , 4.22298130e-01 , 4.28678165e-01 , 4.34699417e-01 , 4.40371811e-01 , 4.45704494e-01 , 4.50705896e-01 , 4.55383776e-01 , 4.59745267e-01 , 4.63796914e-01 , 4.67544711e-01 , 4.70994128e-01 , 4.74150137e-01 , 4.77017239e-01 , 4.79599481e-01 , 4.81900477e-01 , 4.83923420e-01 , 4.85671098e-01 , 4.87145905e-01 , 4.88349853e-01 , 4.89284574e-01 , 4.89951333e-01 , 4.90351029e-01 , 4.90484202e-01 , 
8.52043565e-16 , 3.30166751e-02 , 6.39106008e-02 , 9.28584147e-02 , 1.20026851e-01 , 1.45569684e-01 , 1.69626222e-01 , 1.92321085e-01 , 2.13764865e-01 , 2.34055294e-01 , 2.53278616e-01 , 2.71510979e-01 , 2.88819746e-01 , 3.05264674e-01 , 3.20898944e-01 , 3.35770051e-01 , 3.49920561e-01 , 3.63388760e-01 , 3.76209196e-01 , 3.88413147e-01 , 4.00029016e-01 , 4.11082661e-01 , 4.21597689e-01 , 4.31595697e-01 , 4.41096482e-01 , 4.50118226e-01 , 4.58677650e-01 , 4.66790152e-01 , 4.74469924e-01 , 4.81730057e-01 , 4.88582630e-01 , 4.95038789e-01 , 5.01108820e-01 , 5.06802204e-01 , 5.12127678e-01 , 5.17093277e-01 , 5.21706382e-01 , 5.25973751e-01 , 5.29901557e-01 , 5.33495414e-01 , 5.36760404e-01 , 5.39701099e-01 , 5.42321583e-01 , 5.44625465e-01 , 5.46615898e-01 , 5.48295590e-01 , 5.49666813e-01 , 5.50731417e-01 , 5.51490831e-01 , 5.51946074e-01 , 5.52097754e-01 , 
9.24477905e-16 , 3.57251576e-02 , 6.93076170e-02 , 1.00905626e-01 , 1.30670265e-01 , 1.58742996e-01 , 1.85254187e-01 , 2.10322555e-01 , 2.34055294e-01 , 2.56548674e-01 , 2.77888904e-01 , 2.98153100e-01 , 3.17410272e-01 , 3.35722256e-01 , 3.53144564e-01 , 3.69727154e-01 , 3.85515096e-01 , 4.00549161e-01 , 4.14866327e-01 , 4.28500218e-01 , 4.41481486e-01 , 4.53838135e-01 , 4.65595801e-01 , 4.76778006e-01 , 4.87406359e-01 , 4.97500749e-01 , 5.07079501e-01 , 5.16159518e-01 , 5.24756403e-01 , 5.32884568e-01 , 5.40557326e-01 , 5.47786978e-01 , 5.54584881e-01 , 5.60961519e-01 , 5.66926557e-01 , 5.72488893e-01 , 5.77656702e-01 , 5.82437476e-01 , 5.86838061e-01 , 5.90864686e-01 , 5.94522994e-01 , 5.97818063e-01 , 6.00754427e-01 , 6.03336098e-01 , 6.05566581e-01 , 6.07448885e-01 , 6.08985537e-01 , 6.10178595e-01 , 6.11029647e-01 , 6.11539827e-01 , 6.11709812e-01 , 
9.88414357e-16 , 3.82708967e-02 , 7.43830776e-02 , 1.08479787e-01 , 1.40698929e-01 , 1.71171098e-01 , 2.00018255e-01 , 2.27353041e-01 , 2.53278616e-01 , 2.77888904e-01 , 3.01269088e-01 , 3.23496265e-01 , 3.44640151e-01 , 3.64763803e-01 , 3.83924305e-01 , 4.02173405e-01 , 4.19558092e-01 , 4.36121117e-01 , 4.51901450e-01 , 4.66934686e-01 , 4.81253398e-01 , 4.94887451e-01 , 5.07864272e-01 , 5.20209093e-01 , 5.31945152e-01 , 5.43093886e-01 , 5.53675083e-01 , 5.63707030e-01 , 5.73206633e-01 , 5.82189530e-01 , 5.90670187e-01 , 5.98661982e-01 , 6.06177284e-01 , 6.13227520e-01 , 6.19823233e-01 , 6.25974136e-01 , 6.31689162e-01 , 6.36976500e-01 , 6.41843639e-01 , 6.46297396e-01 , 6.50343948e-01 , 6.53988858e-01 , 6.57237093e-01 , 6.60093052e-01 , 6.62560576e-01 , 6.64642965e-01 , 6.66342993e-01 , 6.67662914e-01 , 6.68604473e-01 , 6.69168913e-01 , 6.69356978e-01 , 
1.04326703e-15 , 4.06700850e-02 , 7.91683174e-02 , 1.15625492e-01 , 1.50168323e-01 , 1.82917857e-01 , 2.13988318e-01 , 2.43486403e-01 , 2.71510979e-01 , 2.98153100e-01 , 3.23496265e-01 , 3.47616825e-01 , 3.70584482e-01 , 3.92462826e-01 , 4.13309870e-01 , 4.33178576e-01 , 4.52117334e-01 , 4.70170417e-01 , 4.87378383e-01 , 5.03778441e-01 , 5.19404777e-01 , 5.34288846e-01 , 5.48459627e-01 , 5.61943853e-01 , 5.74766211e-01 , 5.86949523e-01 , 5.98514900e-01 , 6.09481888e-01 , 6.19868588e-01 , 6.29691766e-01 , 6.38966954e-01 , 6.47708535e-01 , 6.55929821e-01 , 6.63643120e-01 , 6.70859801e-01 , 6.77590348e-01 , 6.83844406e-01 , 6.89630826e-01 , 6.94957706e-01 , 6.99832422e-01 , 7.04261660e-01 , 7.08251444e-01 , 7.11807157e-01 , 7.14933565e-01 , 7.17634831e-01 , 7.19914535e-01 , 7.21775685e-01 , 7.23220725e-01 , 7.24251550e-01 , 7.24869507e-01 , 7.25075403e-01 , 
1.09986595e-15 , 4.29359773e-02 , 8.36891385e-02 , 1.22379796e-01 , 1.59125079e-01 , 1.94037637e-01 , 2.27224656e-01 , 2.58787180e-01 , 2.88819746e-01 , 3.17410272e-01 , 3.44640151e-01 , 3.70584482e-01 , 3.95312412e-01 , 4.18887520e-01 , 4.41368228e-01 , 4.62808222e-01 , 4.83256848e-01 , 5.02759492e-01 , 5.21357935e-01 , 5.39090676e-01 , 5.55993225e-01 , 5.72098369e-01 , 5.87436411e-01 , 6.02035385e-01 , 6.15921247e-01 , 6.29118046e-01 , 6.41648080e-01 , 6.53532027e-01 , 6.64789072e-01 , 6.75437014e-01 , 6.85492364e-01 , 6.94970431e-01 , 7.03885400e-01 , 7.12250403e-01 , 7.20077579e-01 , 7.27378130e-01 , 7.34162374e-01 , 7.40439785e-01 , 7.46219035e-01 , 7.51508028e-01 , 7.56313934e-01 , 7.60643212e-01 , 7.64501641e-01 , 7.67894335e-01 , 7.70825767e-01 , 7.73299780e-01 , 7.75319606e-01 , 7.76887874e-01 , 7.78006617e-01 , 7.78677285e-01 , 7.78900745e-01 , 
1.15937542e-15 , 4.50796194e-02 , 8.79671389e-02 , 1.28773935e-01 , 1.67608851e-01 , 2.04577140e-01 , 2.39779611e-01 , 2.73312019e-01 , 3.05264674e-01 , 3.35722256e-01 , 3.64763803e-01 , 3.92462826e-01 , 4.18887520e-01 , 4.44101036e-01 , 4.68161792e-01 , 4.91123792e-01 , 5.13036956e-01 , 5.33947434e-01 , 5.53897905e-01 , 5.72927864e-01 , 5.91073878e-01 , 6.08369829e-01 , 6.24847130e-01 , 6.40534925e-01 , 6.55460266e-01 , 6.69648281e-01 , 6.83122311e-01 , 6.95904050e-01 , 7.08013658e-01 , 7.19469868e-01 , 7.30290084e-01 , 7.40490463e-01 , 7.50085995e-01 , 7.59090571e-01 , 7.67517046e-01 , 7.75377293e-01 , 7.82682256e-01 , 7.89441992e-01 , 7.95665712e-01 , 8.01361818e-01 , 8.06537933e-01 , 8.11200933e-01 , 8.15356965e-01 , 8.19011477e-01 , 8.22169231e-01 , 8.24834326e-01 , 8.27010202e-01 , 8.28699662e-01 , 8.29904876e-01 , 8.30627388e-01 , 8.30868123e-01 , 
1.21035685e-15 , 4.71103539e-02 , 9.20206497e-02 , 1.34834562e-01 , 1.75653718e-01 , 2.14576823e-01 , 2.51698929e-01 , 2.87110883e-01 , 3.20898944e-01 , 3.53144564e-01 , 3.83924305e-01 , 4.13309870e-01 , 4.41368228e-01 , 4.68161792e-01 , 4.93748644e-01 , 5.18182784e-01 , 5.41514387e-01 , 5.63790064e-01 , 5.85053114e-01 , 6.05343763e-01 , 6.24699398e-01 , 6.43154776e-01 , 6.60742222e-01 , 6.77491810e-01 , 6.93431530e-01 , 7.08587437e-01 , 7.22983792e-01 , 7.36643180e-01 , 7.49586633e-01 , 7.61833723e-01 , 7.73402659e-01 , 7.84310372e-01 , 7.94572586e-01 , 8.04203890e-01 , 8.13217799e-01 , 8.21626807e-01 , 8.29442438e-01 , 8.36675293e-01 , 8.43335087e-01 , 8.49430687e-01 , 8.54970143e-01 , 8.59960717e-01 , 8.64408909e-01 , 8.68320478e-01 , 8.71700462e-01 , 8.74553195e-01 , 8.76882322e-01 , 8.78690807e-01 , 8.79980948e-01 , 8.80754380e-01 , 8.81012082e-01 , 
1.25221799e-15 , 4.90361827e-02 , 9.58654134e-02 , 1.40584666e-01 , 1.83289238e-01 , 2.24072013e-01 , 2.63022843e-01 , 3.00228047e-01 , 3.35770051e-01 , 3.69727154e-01 , 4.02173405e-01 , 4.33178576e-01 , 4.62808222e-01 , 4.91123792e-01 , 5.18182784e-01 , 5.44038931e-01 , 5.68742406e-01 , 5.92340026e-01 , 6.14875463e-01 , 6.36389452e-01 , 6.56919983e-01 , 6.76502493e-01 , 6.95170037e-01 , 7.12953455e-01 , 7.29881521e-01 , 7.45981083e-01 , 7.61277192e-01 , 7.75793218e-01 , 7.89550958e-01 , 8.02570731e-01 , 8.14871471e-01 , 8.26470803e-01 , 8.37385121e-01 , 8.47629649e-01 , 8.57218506e-01 , 8.66164756e-01 , 8.74480462e-01 , 8.82176727e-01 , 8.89263734e-01 , 8.95750782e-01 , 9.01646320e-01 , 9.06957973e-01 , 9.11692569e-01 , 9.15856159e-01 , 9.19454042e-01 , 9.22490773e-01 , 9.24970185e-01 , 9.26895400e-01 , 9.28268833e-01 , 9.29092206e-01 , 9.29366549e-01 , 
1.29786326e-15 , 5.08640322e-02 , 9.95150867e-02 , 1.46044260e-01 , 1.90541258e-01 , 2.33093771e-01 , 2.73786944e-01 , 3.12702932e-01 , 3.49920561e-01 , 3.85515096e-01 , 4.19558092e-01 , 4.52117334e-01 , 4.83256848e-01 , 5.13036956e-01 , 5.41514387e-01 , 5.68742406e-01 , 5.94770970e-01 , 6.19646893e-01 , 6.43414018e-01 , 6.66113386e-01 , 6.87783407e-01 , 7.08460020e-01 , 7.28176849e-01 , 7.46965345e-01 , 7.64854930e-01 , 7.81873115e-01 , 7.98045627e-01 , 8.13396510e-01 , 8.27948231e-01 , 8.41721769e-01 , 8.54736699e-01 , 8.67011269e-01 , 8.78562475e-01 , 8.89406118e-01 , 8.99556864e-01 , 9.09028303e-01 , 9.17832989e-01 , 9.25982486e-01 , 9.33487411e-01 , 9.40357464e-01 , 9.46601463e-01 , 9.52227372e-01 , 9.57242322e-01 , 9.61652640e-01 , 9.65463865e-01 , 9.68680763e-01 , 9.71307343e-01 , 9.73346871e-01 , 9.74801877e-01 , 9.75674161e-01 , 9.75964802e-01 , 
1.34815890e-15 , 5.25999533e-02 , 1.02981621e-01 , 1.51230907e-01 , 1.97432547e-01 , 2.41669581e-01 , 2.84022887e-01 , 3.24570792e-01 , 3.63388760e-01 , 4.00549161e-01 , 4.36121117e-01 , 4.70170417e-01 , 5.02759492e-01 , 5.33947434e-01 , 5.63790064e-01 , 5.92340026e-01 , 6.19646893e-01 , 6.45757306e-01 , 6.70715104e-01 , 6.94561469e-01 , 7.17335067e-01 , 7.39072184e-01 , 7.59806867e-01 , 7.79571044e-01 , 7.98394653e-01 , 8.16305755e-01 , 8.33330641e-01 , 8.49493931e-01 , 8.64818669e-01 , 8.79326408e-01 , 8.93037289e-01 , 9.05970116e-01 , 9.18142418e-01 , 9.29570515e-01 , 9.40269573e-01 , 9.50253653e-01 , 9.59535758e-01 , 9.68127879e-01 , 9.76041026e-01 , 9.83285272e-01 , 9.89869773e-01 , 9.95802807e-01 , 1.00109179e+00 , 1.00574330e+00 , 1.00976310e+00 , 1.01315616e+00 , 1.01592664e+00 , 1.01807796e+00 , 1.01961273e+00 , 1.02053285e+00 , 1.02083943e+00 , 
1.38239509e-15 , 5.42492737e-02 , 1.06275554e-01 , 1.56160128e-01 , 2.03983294e-01 , 2.49823905e-01 , 2.93758965e-01 , 3.35863286e-01 , 3.76209196e-01 , 4.14866327e-01 , 4.51901450e-01 , 4.87378383e-01 , 5.21357935e-01 , 5.53897905e-01 , 5.85053114e-01 , 6.14875463e-01 , 6.43414018e-01 , 6.70715104e-01 , 6.96822417e-01 , 7.21777137e-01 , 7.45618046e-01 , 7.68381645e-01 , 7.90102272e-01 , 8.10812210e-01 , 8.30541802e-01 , 8.49319547e-01 , 8.67172202e-01 , 8.84124868e-01 , 9.00201083e-01 , 9.15422894e-01 , 9.29810936e-01 , 9.43384498e-01 , 9.56161586e-01 , 9.68158982e-01 , 9.79392297e-01 , 9.89876021e-01 , 9.99623563e-01 , 1.00864730e+00 , 1.01695861e+00 , 1.02456789e+00 , 1.03148462e+00 , 1.03771737e+00 , 1.04327380e+00 , 1.04816075e+00 , 1.05238417e+00 , 1.05594921e+00 , 1.05886020e+00 , 1.06112067e+00 , 1.06273334e+00 , 1.06370017e+00 , 1.06402231e+00 , 
1.42153339e-15 , 5.58167168e-02 , 1.09406240e-01 , 1.60845730e-01 , 2.10211500e-01 , 2.57578624e-01 , 3.03020582e-01 , 3.46608951e-01 , 3.88413147e-01 , 4.28500218e-01 , 4.66934686e-01 , 5.03778441e-01 , 5.39090676e-01 , 5.72927864e-01 , 6.05343763e-01 , 6.36389452e-01 , 6.66113386e-01 , 6.94561469e-01 , 7.21777137e-01 , 7.47801450e-01 , 7.72673189e-01 , 7.96428951e-01 , 8.19103254e-01 , 8.40728630e-01 , 8.61335721e-01 , 8.80953368e-01 , 8.99608702e-01 , 9.17327223e-01 , 9.34132879e-01 , 9.50048140e-01 , 9.65094064e-01 , 9.79290364e-01 , 9.92655465e-01 , 1.00520656e+00 , 1.01695965e+00 , 1.02792961e+00 , 1.03813022e+00 , 1.04757421e+00 , 1.05627327e+00 , 1.06423812e+00 , 1.07147852e+00 , 1.07800331e+00 , 1.08382039e+00 , 1.08893679e+00 , 1.09335870e+00 , 1.09709140e+00 , 1.10013937e+00 , 1.10250625e+00 , 1.10419488e+00 , 1.10520725e+00 , 1.10554457e+00 , 
1.46629186e-15 , 5.73064952e-02 , 1.12382030e-01 , 1.65300057e-01 , 2.16133300e-01 , 2.64953405e-01 , 3.11830640e-01 , 3.56833607e-01 , 4.00029016e-01 , 4.41481486e-01 , 4.81253398e-01 , 5.19404777e-01 , 5.55993225e-01 , 5.91073878e-01 , 6.24699398e-01 , 6.56919983e-01 , 6.87783407e-01 , 7.17335067e-01 , 7.45618046e-01 , 7.72673189e-01 , 7.98539173e-01 , 8.23252598e-01 , 8.46848062e-01 , 8.69358250e-01 , 8.90814012e-01 , 9.11244445e-01 , 9.30676971e-01 , 9.49137410e-01 , 9.66650049e-01 , 9.83237710e-01 , 9.98921815e-01 , 1.01372244e+00 , 1.02765837e+00 , 1.04074716e+00 , 1.05300516e+00 , 1.06444759e+00 , 1.07508855e+00 , 1.08494108e+00 , 1.09401719e+00 , 1.10232786e+00 , 1.10988311e+00 , 1.11669201e+00 , 1.12276271e+00 , 1.12810242e+00 , 1.13271749e+00 , 1.13661339e+00 , 1.13979470e+00 , 1.14226518e+00 , 1.14402774e+00 , 1.14508445e+00 , 1.14543655e+00 , 
1.50182856e-15 , 5.87223856e-02 , 1.15210417e-01 , 1.69534204e-01 , 2.21763217e-01 , 2.71965994e-01 , 3.20209861e-01 , 3.66560684e-01 , 4.11082661e-01 , 4.53838135e-01 , 4.94887451e-01 , 5.34288846e-01 , 5.72098369e-01 , 6.08369829e-01 , 6.43154776e-01 , 6.76502493e-01 , 7.08460020e-01 , 7.39072184e-01 , 7.68381645e-01 , 7.96428951e-01 , 8.23252598e-01 , 8.48889100e-01 , 8.73373055e-01 , 8.96737217e-01 , 9.19012565e-01 , 9.40228376e-01 , 9.60412286e-01 , 9.79590366e-01 , 9.97787176e-01 , 1.01502583e+00 , 1.03132804e+00 , 1.04671421e+00 , 1.06120343e+00 , 1.07481356e+00 , 1.08756127e+00 , 1.09946207e+00 , 1.11053035e+00 , 1.12077944e+00 , 1.13022159e+00 , 1.13886806e+00 , 1.14672910e+00 , 1.15381399e+00 , 1.16013107e+00 , 1.16568776e+00 , 1.17049054e+00 , 1.17454502e+00 , 1.17785593e+00 , 1.18042711e+00 , 1.18226154e+00 , 1.18336135e+00 , 1.18372781e+00 , 
1.52767577e-15 , 6.00677899e-02 , 1.17898156e-01 , 1.73558180e-01 , 2.27114382e-01 , 2.78632463e-01 , 3.28177058e-01 , 3.75811512e-01 , 4.21597689e-01 , 4.65595801e-01 , 5.07864272e-01 , 5.48459627e-01 , 5.87436411e-01 , 6.24847130e-01 , 6.60742222e-01 , 6.95170037e-01 , 7.28176849e-01 , 7.59806867e-01 , 7.90102272e-01 , 8.19103254e-01 , 8.46848062e-01 , 8.73373055e-01 , 8.98712759e-01 , 9.22899927e-01 , 9.45965598e-01 , 9.67939157e-01 , 9.88848395e-01 , 1.00871957e+00 , 1.02757744e+00 , 1.04544537e+00 , 1.06234532e+00 , 1.07829794e+00 , 1.09332260e+00 , 1.10743741e+00 , 1.12065932e+00 , 1.13300409e+00 , 1.14448639e+00 , 1.15511977e+00 , 1.16491673e+00 , 1.17388875e+00 , 1.18204630e+00 , 1.18939884e+00 , 1.19595490e+00 , 1.20172206e+00 , 1.20670695e+00 , 1.21091531e+00 , 1.21435196e+00 , 1.21702085e+00 , 1.21892502e+00 , 1.22006666e+00 , 1.22044706e+00 , 
1.55958398e-15 , 6.13457838e-02 , 1.20451359e-01 , 1.77381053e-01 , 2.32198703e-01 , 2.84967418e-01 , 3.35749362e-01 , 3.84605556e-01 , 4.31595697e-01 , 4.76778006e-01 , 5.20209093e-01 , 5.61943853e-01 , 6.02035385e-01 , 6.40534925e-01 , 6.77491810e-01 , 7.12953455e-01 , 7.46965345e-01 , 7.79571044e-01 , 8.10812210e-01 , 8.40728630e-01 , 8.69358250e-01 , 8.96737217e-01 , 9.22899927e-01 , 9.47879072e-01 , 9.71705690e-01 , 9.94409217e-01 , 1.01601754e+00 , 1.03655703e+00 , 1.05605264e+00 , 1.07452788e+00 , 1.09200493e+00 , 1.10850465e+00 , 1.12404662e+00 , 1.13864919e+00 , 1.15232953e+00 , 1.16510363e+00 , 1.17698638e+00 , 1.18799156e+00 , 1.19813186e+00 , 1.20741897e+00 , 1.21586354e+00 , 1.22347522e+00 , 1.23026270e+00 , 1.23623368e+00 , 1.24139496e+00 , 1.24575236e+00 , 1.24931083e+00 , 1.25207438e+00 , 1.25404612e+00 , 1.25522827e+00 , 1.25562218e+00 , 
1.59812235e-15 , 6.25591585e-02 , 1.22875573e-01 , 1.81011064e-01 , 2.37027015e-01 , 2.90984164e-01 , 3.42942408e-01 , 3.92960618e-01 , 4.41096482e-01 , 4.87406359e-01 , 5.31945152e-01 , 5.74766211e-01 , 6.15921247e-01 , 6.55460266e-01 , 6.93431530e-01 , 7.29881521e-01 , 7.64854930e-01 , 7.98394653e-01 , 8.30541802e-01 , 8.61335721e-01 , 8.90814012e-01 , 9.19012565e-01 , 9.45965598e-01 , 9.71705690e-01 , 9.96263828e-01 , 1.01966945e+00 , 1.04195048e+00 , 1.06313338e+00 , 1.08324319e+00 , 1.10230358e+00 , 1.12033688e+00 , 1.13736411e+00 , 1.15340504e+00 , 1.16847822e+00 , 1.18260099e+00 , 1.19578956e+00 , 1.20805899e+00 , 1.21942325e+00 , 1.22989523e+00 , 1.23948678e+00 , 1.24820873e+00 , 1.25607087e+00 , 1.26308204e+00 , 1.26925008e+00 , 1.27458189e+00 , 1.27908342e+00 , 1.28275968e+00 , 1.28561477e+00 , 1.28765186e+00 , 1.28887321e+00 , 1.28928017e+00 , 
1.61862243e-15 , 6.37104541e-02 , 1.25175850e-01 , 1.84455719e-01 , 2.41609202e-01 , 2.96694860e-01 , 3.49770502e-01 , 4.00893017e-01 , 4.50118226e-01 , 4.97500749e-01 , 5.43093886e-01 , 5.86949523e-01 , 6.29118046e-01 , 6.69648281e-01 , 7.08587437e-01 , 7.45981083e-01 , 7.81873115e-01 , 8.16305755e-01 , 8.49319547e-01 , 8.80953368e-01 , 9.11244445e-01 , 9.40228376e-01 , 9.67939157e-01 , 9.94409217e-01 , 1.01966945e+00 , 1.04374924e+00 , 1.06667652e+00 , 1.08847778e+00 , 1.10917815e+00 , 1.12880137e+00 , 1.14736990e+00 , 1.16490488e+00 , 1.18142624e+00 , 1.19695267e+00 , 1.21150169e+00 , 1.22508966e+00 , 1.23773180e+00 , 1.24944225e+00 , 1.26023407e+00 , 1.27011925e+00 , 1.27910876e+00 , 1.28721254e+00 , 1.29443955e+00 , 1.30079776e+00 , 1.30629416e+00 , 1.31093480e+00 , 1.31472477e+00 , 1.31766823e+00 , 1.31976840e+00 , 1.32102758e+00 , 1.32144716e+00 , 
1.64587412e-15 , 6.48019883e-02 , 1.27356803e-01 , 1.87721878e-01 , 2.45954300e-01 , 3.02110632e-01 , 3.56246759e-01 , 4.08417735e-01 , 4.58677650e-01 , 5.07079501e-01 , 5.53675083e-01 , 5.98514900e-01 , 6.41648080e-01 , 6.83122311e-01 , 7.22983792e-01 , 7.61277192e-01 , 7.98045627e-01 , 8.33330641e-01 , 8.67172202e-01 , 8.99608702e-01 , 9.30676971e-01 , 9.60412286e-01 , 9.88848395e-01 , 1.01601754e+00 , 1.04195048e+00 , 1.06667652e+00 , 1.09022355e+00 , 1.11261808e+00 , 1.13388525e+00 , 1.15404887e+00 , 1.17313146e+00 , 1.19115429e+00 , 1.20813738e+00 , 1.22409956e+00 , 1.23905847e+00 , 1.25303060e+00 , 1.26603133e+00 , 1.27807493e+00 , 1.28917459e+00 , 1.29934243e+00 , 1.30858956e+00 , 1.31692604e+00 , 1.32436093e+00 , 1.33090230e+00 , 1.33655726e+00 , 1.34133191e+00 , 1.34523143e+00 , 1.34826004e+00 , 1.35042099e+00 , 1.35171663e+00 , 1.35214836e+00 , 
1.68035685e-15 , 6.58358803e-02 , 1.29422648e-01 , 1.90815819e-01 , 2.50070588e-01 , 3.07241684e-01 , 3.62383217e-01 , 4.15548547e-01 , 4.66790152e-01 , 5.16159518e-01 , 5.63707030e-01 , 6.09481888e-01 , 6.53532027e-01 , 6.95904050e-01 , 7.36643180e-01 , 7.75793218e-01 , 8.13396510e-01 , 8.49493931e-01 , 8.84124868e-01 , 9.17327223e-01 , 9.49137410e-01 , 9.79590366e-01 , 1.00871957e+00 , 1.03655703e+00 , 1.06313338e+00 , 1.08847778e+00 , 1.11261808e+00 , 1.13558074e+00 , 1.15739089e+00 , 1.17807239e+00 , 1.19764780e+00 , 1.21613845e+00 , 1.23356446e+00 , 1.24994474e+00 , 1.26529705e+00 , 1.27963798e+00 , 1.29298304e+00 , 1.30534659e+00 , 1.31674196e+00 , 1.32718138e+00 , 1.33667606e+00 , 1.34523616e+00 , 1.35287087e+00 , 1.35958832e+00 , 1.36539570e+00 , 1.37029921e+00 , 1.37430407e+00 , 1.37741454e+00 , 1.37963395e+00 , 1.38096465e+00 , 1.38140806e+00 , 
1.70490559e-15 , 6.68140715e-02 , 1.31377253e-01 , 1.93743295e-01 , 2.53965660e-01 , 3.12097386e-01 , 3.68190946e-01 , 4.22298130e-01 , 4.74469924e-01 , 5.24756403e-01 , 5.73206633e-01 , 6.19868588e-01 , 6.64789072e-01 , 7.08013658e-01 , 7.49586633e-01 , 7.89550958e-01 , 8.27948231e-01 , 8.64818669e-01 , 9.00201083e-01 , 9.34132879e-01 , 9.66650049e-01 , 9.97787176e-01 , 1.02757744e+00 , 1.05605264e+00 , 1.08324319e+00 , 1.10917815e+00 , 1.13388525e+00 , 1.15739089e+00 , 1.17972019e+00 , 1.20089700e+00 , 1.22094390e+00 , 1.23988227e+00 , 1.25773228e+00 , 1.27451292e+00 , 1.29024202e+00 , 1.30493628e+00 , 1.31861127e+00 , 1.33128148e+00 , 1.34296031e+00 , 1.35366011e+00 , 1.36339217e+00 , 1.37216675e+00 , 1.37999310e+00 , 1.38687946e+00 , 1.39283308e+00 , 1.39786021e+00 , 1.40196614e+00 , 1.40515518e+00 , 1.40743068e+00 , 1.40879502e+00 , 1.40924964e+00 , 
1.71918292e-15 , 6.77383423e-02 , 1.33224162e-01 , 1.96509589e-01 , 2.57646493e-01 , 3.16686351e-01 , 3.73680130e-01 , 4.28678165e-01 , 4.81730057e-01 , 5.32884568e-01 , 5.82189530e-01 , 6.29691766e-01 , 6.75437014e-01 , 7.19469868e-01 , 7.61833723e-01 , 8.02570731e-01 , 8.41721769e-01 , 8.79326408e-01 , 9.15422894e-01 , 9.50048140e-01 , 9.83237710e-01 , 1.01502583e+00 , 1.04544537e+00 , 1.07452788e+00 , 1.10230358e+00 , 1.12880137e+00 , 1.15404887e+00 , 1.17807239e+00 , 1.20089700e+00 , 1.22254652e+00 , 1.24304355e+00 , 1.26240947e+00 , 1.28066450e+00 , 1.29782766e+00 , 1.31391686e+00 , 1.32894886e+00 , 1.34293932e+00 , 1.35590278e+00 , 1.36785274e+00 , 1.37880162e+00 , 1.38876080e+00 , 1.39774061e+00 , 1.40575037e+00 , 1.41279839e+00 , 1.41889199e+00 , 1.42403746e+00 , 1.42824015e+00 , 1.43150441e+00 , 1.43383361e+00 , 1.43523016e+00 , 1.43569552e+00 , 
1.74095246e-15 , 6.86103276e-02 , 1.34966632e-01 , 1.99119556e-01 , 2.61119499e-01 , 3.21016505e-01 , 3.78860147e-01 , 4.34699417e-01 , 4.88582630e-01 , 5.40557326e-01 , 5.90670187e-01 , 6.38966954e-01 , 6.85492364e-01 , 7.30290084e-01 , 7.73402659e-01 , 8.14871471e-01 , 8.54736699e-01 , 8.93037289e-01 , 9.29810936e-01 , 9.65094064e-01 , 9.98921815e-01 , 1.03132804e+00 , 1.06234532e+00 , 1.09200493e+00 , 1.12033688e+00 , 1.14736990e+00 , 1.17313146e+00 , 1.19764780e+00 , 1.22094390e+00 , 1.24304355e+00 , 1.26396931e+00 , 1.28374259e+00 , 1.30238359e+00 , 1.31991140e+00 , 1.33634394e+00 , 1.35169803e+00 , 1.36598938e+00 , 1.37923262e+00 , 1.39144129e+00 , 1.40262788e+00 , 1.41280384e+00 , 1.42197956e+00 , 1.43016443e+00 , 1.43736681e+00 , 1.44359406e+00 , 1.44885255e+00 , 1.45314765e+00 , 1.45648374e+00 , 1.45886424e+00 , 1.46029156e+00 , 1.46076717e+00 , 
1.77059240e-15 , 6.94315293e-02 , 1.36607657e-01 , 2.01577656e-01 , 2.64390577e-01 , 3.25095142e-01 , 3.83739636e-01 , 4.40371811e-01 , 4.95038789e-01 , 5.47786978e-01 , 5.98661982e-01 , 6.47708535e-01 , 6.94970431e-01 , 7.40490463e-01 , 7.84310372e-01 , 8.26470803e-01 , 8.67011269e-01 , 9.05970116e-01 , 9.43384498e-01 , 9.79290364e-01 , 1.01372244e+00 , 1.04671421e+00 , 1.07829794e+00 , 1.10850465e+00 , 1.13736411e+00 , 1.16490488e+00 , 1.19115429e+00 , 1.21613845e+00 , 1.23988227e+00 , 1.26240947e+00 , 1.28374259e+00 , 1.30390299e+00 , 1.32291091e+00 , 1.34078542e+00 , 1.35754449e+00 , 1.37320497e+00 , 1.38778260e+00 , 1.40129206e+00 , 1.41374696e+00 , 1.42515982e+00 , 1.43554215e+00 , 1.44490441e+00 , 1.45325602e+00 , 1.46060540e+00 , 1.46695995e+00 , 1.47232609e+00 , 1.47670921e+00 , 1.48011373e+00 , 1.48254308e+00 , 1.48399972e+00 , 1.48448510e+00 , 
1.78996091e-15 , 7.02033277e-02 , 1.38149987e-01 , 2.03887992e-01 , 2.67465153e-01 , 3.28928973e-01 , 3.88326552e-01 , 4.45704494e-01 , 5.01108820e-01 , 5.54584881e-01 , 6.06177284e-01 , 6.55929821e-01 , 7.03885400e-01 , 7.50085995e-01 , 7.94572586e-01 , 8.37385121e-01 , 8.78562475e-01 , 9.18142418e-01 , 9.56161586e-01 , 9.92655465e-01 , 1.02765837e+00 , 1.06120343e+00 , 1.09332260e+00 , 1.12404662e+00 , 1.15340504e+00 , 1.18142624e+00 , 1.20813738e+00 , 1.23356446e+00 , 1.25773228e+00 , 1.28066450e+00 , 1.30238359e+00 , 1.32291091e+00 , 1.34226666e+00 , 1.36046992e+00 , 1.37753867e+00 , 1.39348978e+00 , 1.40833903e+00 , 1.42210112e+00 , 1.43478969e+00 , 1.44641733e+00 , 1.45699558e+00 , 1.46653494e+00 , 1.47504488e+00 , 1.48253386e+00 , 1.48900931e+00 , 1.49447769e+00 , 1.49894441e+00 , 1.50241393e+00 , 1.50488970e+00 , 1.50637418e+00 , 1.50686884e+00 , 
1.79878838e-15 , 7.09269907e-02 , 1.39596150e-01 , 2.06054336e-01 , 2.70348217e-01 , 3.32524175e-01 , 3.92628220e-01 , 4.50705896e-01 , 5.06802204e-01 , 5.60961519e-01 , 6.13227520e-01 , 6.63643120e-01 , 7.12250403e-01 , 7.59090571e-01 , 8.04203890e-01 , 8.47629649e-01 , 8.89406118e-01 , 9.29570515e-01 , 9.68158982e-01 , 1.00520656e+00 , 1.04074716e+00 , 1.07481356e+00 , 1.10743741e+00 , 1.13864919e+00 , 1.16847822e+00 , 1.19695267e+00 , 1.22409956e+00 , 1.24994474e+00 , 1.27451292e+00 , 1.29782766e+00 , 1.31991140e+00 , 1.34078542e+00 , 1.36046992e+00 , 1.37898397e+00 , 1.39634553e+00 , 1.41257149e+00 , 1.42767764e+00 , 1.44167872e+00 , 1.45458840e+00 , 1.46641928e+00 , 1.47718295e+00 , 1.48688994e+00 , 1.49554975e+00 , 1.50317088e+00 , 1.50976080e+00 , 1.51532598e+00 , 1.51987187e+00 , 1.52340294e+00 , 1.52592266e+00 , 1.52743350e+00 , 1.52793695e+00 , 
1.82510298e-15 , 7.16036830e-02 , 1.40948467e-01 , 2.08080151e-01 , 2.73044353e-01 , 3.35886428e-01 , 3.96651379e-01 , 4.55383776e-01 , 5.12127678e-01 , 5.66926557e-01 , 6.19823233e-01 , 6.70859801e-01 , 7.20077579e-01 , 7.67517046e-01 , 8.13217799e-01 , 8.57218506e-01 , 8.99556864e-01 , 9.40269573e-01 , 9.79392297e-01 , 1.01695965e+00 , 1.05300516e+00 , 1.08756127e+00 , 1.12065932e+00 , 1.15232953e+00 , 1.18260099e+00 , 1.21150169e+00 , 1.23905847e+00 , 1.26529705e+00 , 1.29024202e+00 , 1.31391686e+00 , 1.33634394e+00 , 1.35754449e+00 , 1.37753867e+00 , 1.39634553e+00 , 1.41398302e+00 , 1.43046803e+00 , 1.44581636e+00 , 1.46004277e+00 , 1.47316093e+00 , 1.48518349e+00 , 1.49612204e+00 , 1.50598715e+00 , 1.51478835e+00 , 1.52253416e+00 , 1.52923208e+00 , 1.53488860e+00 , 1.53950919e+00 , 1.54309835e+00 , 1.54565955e+00 , 1.54719527e+00 , 1.54770701e+00 , 
1.84093259e-15 , 7.22344726e-02 , 1.42209069e-01 , 2.09968616e-01 , 2.75557772e-01 , 3.39020947e-01 , 4.00402220e-01 , 4.59745267e-01 , 5.17093277e-01 , 5.72488893e-01 , 6.25974136e-01 , 6.77590348e-01 , 7.27378130e-01 , 7.75377293e-01 , 8.21626807e-01 , 8.66164756e-01 , 9.09028303e-01 , 9.50253653e-01 , 9.89876021e-01 , 1.02792961e+00 , 1.06444759e+00 , 1.09946207e+00 , 1.13300409e+00 , 1.16510363e+00 , 1.19578956e+00 , 1.22508966e+00 , 1.25303060e+00 , 1.27963798e+00 , 1.30493628e+00 , 1.32894886e+00 , 1.35169803e+00 , 1.37320497e+00 , 1.39348978e+00 , 1.41257149e+00 , 1.43046803e+00 , 1.44719628e+00 , 1.46277206e+00 , 1.47721010e+00 , 1.49052411e+00 , 1.50272674e+00 , 1.51382962e+00 , 1.52384331e+00 , 1.53277739e+00 , 1.54064038e+00 , 1.54743981e+00 , 1.55318218e+00 , 1.55787300e+00 , 1.56151676e+00 , 1.56411695e+00 , 1.56567607e+00 , 1.56619561e+00 , 
1.84605540e-15 , 7.28203379e-02 , 1.43379906e-01 , 2.11722644e-01 , 2.77892331e-01 , 3.41932512e-01 , 4.03886423e-01 , 4.63796914e-01 , 5.21706382e-01 , 5.77656702e-01 , 6.31689162e-01 , 6.83844406e-01 , 7.34162374e-01 , 7.82682256e-01 , 8.29442438e-01 , 8.74480462e-01 , 9.17832989e-01 , 9.59535758e-01 , 9.99623563e-01 , 1.03813022e+00 , 1.07508855e+00 , 1.11053035e+00 , 1.14448639e+00 , 1.17698638e+00 , 1.20805899e+00 , 1.23773180e+00 , 1.26603133e+00 , 1.29298304e+00 , 1.31861127e+00 , 1.34293932e+00 , 1.36598938e+00 , 1.38778260e+00 , 1.40833903e+00 , 1.42767764e+00 , 1.44581636e+00 , 1.46277206e+00 , 1.47856052e+00 , 1.49319650e+00 , 1.50669371e+00 , 1.51906480e+00 , 1.53032141e+00 , 1.54047414e+00 , 1.54953255e+00 , 1.55750521e+00 , 1.56439964e+00 , 1.57022237e+00 , 1.57497892e+00 , 1.57867379e+00 , 1.58131048e+00 , 1.58289149e+00 , 1.58341833e+00 , 
1.85958209e-15 , 7.33621727e-02 , 1.44462762e-01 , 2.13344897e-01 , 2.80051556e-01 , 3.44625497e-01 , 4.07109183e-01 , 4.67544711e-01 , 5.25973751e-01 , 5.82437476e-01 , 6.36976500e-01 , 6.89630826e-01 , 7.40439785e-01 , 7.89441992e-01 , 8.36675293e-01 , 8.82176727e-01 , 9.25982486e-01 , 9.68127879e-01 , 1.00864730e+00 , 1.04757421e+00 , 1.08494108e+00 , 1.12077944e+00 , 1.15511977e+00 , 1.18799156e+00 , 1.21942325e+00 , 1.24944225e+00 , 1.27807493e+00 , 1.30534659e+00 , 1.33128148e+00 , 1.35590278e+00 , 1.37923262e+00 , 1.40129206e+00 , 1.42210112e+00 , 1.44167872e+00 , 1.46004277e+00 , 1.47721010e+00 , 1.49319650e+00 , 1.50801672e+00 , 1.52168446e+00 , 1.53421238e+00 , 1.54561213e+00 , 1.55589432e+00 , 1.56506852e+00 , 1.57314330e+00 , 1.58012622e+00 , 1.58602380e+00 , 1.59084156e+00 , 1.59458404e+00 , 1.59725473e+00 , 1.59885614e+00 , 1.59938977e+00 , 
1.88174463e-15 , 7.38607917e-02 , 1.45459261e-01 , 2.14837802e-01 , 2.82038665e-01 , 3.47103891e-01 , 4.10075240e-01 , 4.70994128e-01 , 5.29901557e-01 , 5.86838061e-01 , 6.41843639e-01 , 6.94957706e-01 , 7.46219035e-01 , 7.95665712e-01 , 8.43335087e-01 , 8.89263734e-01 , 9.33487411e-01 , 9.76041026e-01 , 1.01695861e+00 , 1.05627327e+00 , 1.09401719e+00 , 1.13022159e+00 , 1.16491673e+00 , 1.19813186e+00 , 1.22989523e+00 , 1.26023407e+00 , 1.28917459e+00 , 1.31674196e+00 , 1.34296031e+00 , 1.36785274e+00 , 1.39144129e+00 , 1.41374696e+00 , 1.43478969e+00 , 1.45458840e+00 , 1.47316093e+00 , 1.49052411e+00 , 1.50669371e+00 , 1.52168446e+00 , 1.53551006e+00 , 1.54818318e+00 , 1.55971547e+00 , 1.57011752e+00 , 1.57939895e+00 , 1.58756831e+00 , 1.59463317e+00 , 1.60060007e+00 , 1.60547455e+00 , 1.60926112e+00 , 1.61196330e+00 , 1.61358360e+00 , 1.61412354e+00 , 
1.89319134e-15 , 7.43169347e-02 , 1.46370879e-01 , 2.16203562e-01 , 2.83856578e-01 , 3.49371317e-01 , 4.12788905e-01 , 4.74150137e-01 , 5.33495414e-01 , 5.90864686e-01 , 6.46297396e-01 , 6.99832422e-01 , 7.51508028e-01 , 8.01361818e-01 , 8.49430687e-01 , 8.95750782e-01 , 9.40357464e-01 , 9.83285272e-01 , 1.02456789e+00 , 1.06423812e+00 , 1.10232786e+00 , 1.13886806e+00 , 1.17388875e+00 , 1.20741897e+00 , 1.23948678e+00 , 1.27011925e+00 , 1.29934243e+00 , 1.32718138e+00 , 1.35366011e+00 , 1.37880162e+00 , 1.40262788e+00 , 1.42515982e+00 , 1.44641733e+00 , 1.46641928e+00 , 1.48518349e+00 , 1.50272674e+00 , 1.51906480e+00 , 1.53421238e+00 , 1.54818318e+00 , 1.56098986e+00 , 1.57264407e+00 , 1.58315641e+00 , 1.59253648e+00 , 1.60079287e+00 , 1.60793314e+00 , 1.61396383e+00 , 1.61889048e+00 , 1.62271763e+00 , 1.62544879e+00 , 1.62708649e+00 , 1.62763222e+00 , 
1.89376083e-15 , 7.47312698e-02 , 1.47198950e-01 , 2.17444171e-01 , 2.85507936e-01 , 3.51431053e-01 , 4.15254075e-01 , 4.77017239e-01 , 5.36760404e-01 , 5.94522994e-01 , 6.50343948e-01 , 7.04261660e-01 , 7.56313934e-01 , 8.06537933e-01 , 8.54970143e-01 , 9.01646320e-01 , 9.46601463e-01 , 9.89869773e-01 , 1.03148462e+00 , 1.07147852e+00 , 1.10988311e+00 , 1.14672910e+00 , 1.18204630e+00 , 1.21586354e+00 , 1.24820873e+00 , 1.27910876e+00 , 1.30858956e+00 , 1.33667606e+00 , 1.36339217e+00 , 1.38876080e+00 , 1.41280384e+00 , 1.43554215e+00 , 1.45699558e+00 , 1.47718295e+00 , 1.49612204e+00 , 1.51382962e+00 , 1.53032141e+00 , 1.54561213e+00 , 1.55971547e+00 , 1.57264407e+00 , 1.58440957e+00 , 1.59502260e+00 , 1.60449275e+00 , 1.61282860e+00 , 1.62003772e+00 , 1.62612666e+00 , 1.63110097e+00 , 1.63496517e+00 , 1.63772281e+00 , 1.63937638e+00 , 1.63992740e+00 , 
1.90307571e-15 , 7.51043978e-02 , 1.47944671e-01 , 2.18561417e-01 , 2.86995112e-01 , 3.53286043e-01 , 4.17474254e-01 , 4.79599481e-01 , 5.39701099e-01 , 5.97818063e-01 , 6.53988858e-01 , 7.08251444e-01 , 7.60643212e-01 , 8.11200933e-01 , 8.59960717e-01 , 9.06957973e-01 , 9.52227372e-01 , 9.95802807e-01 , 1.03771737e+00 , 1.07800331e+00 , 1.11669201e+00 , 1.15381399e+00 , 1.18939884e+00 , 1.22347522e+00 , 1.25607087e+00 , 1.28721254e+00 , 1.31692604e+00 , 1.34523616e+00 , 1.37216675e+00 , 1.39774061e+00 , 1.42197956e+00 , 1.44490441e+00 , 1.46653494e+00 , 1.48688994e+00 , 1.50598715e+00 , 1.52384331e+00 , 1.54047414e+00 , 1.55589432e+00 , 1.57011752e+00 , 1.58315641e+00 , 1.59502260e+00 , 1.60572672e+00 , 1.61527835e+00 , 1.62368610e+00 , 1.63095752e+00 , 1.63709917e+00 , 1.64211660e+00 , 1.64601434e+00 , 1.64879592e+00 , 1.65046386e+00 , 1.65101968e+00 , 
1.92129510e-15 , 7.54368541e-02 , 1.48609110e-01 , 2.19556898e-01 , 2.88320224e-01 , 3.54938918e-01 , 4.19452570e-01 , 4.81900477e-01 , 5.42321583e-01 , 6.00754427e-01 , 6.57237093e-01 , 7.11807157e-01 , 7.64501641e-01 , 8.15356965e-01 , 8.64408909e-01 , 9.11692569e-01 , 9.57242322e-01 , 1.00109179e+00 , 1.04327380e+00 , 1.08382039e+00 , 1.12276271e+00 , 1.16013107e+00 , 1.19595490e+00 , 1.23026270e+00 , 1.26308204e+00 , 1.29443955e+00 , 1.32436093e+00 , 1.35287087e+00 , 1.37999310e+00 , 1.40575037e+00 , 1.43016443e+00 , 1.45325602e+00 , 1.47504488e+00 , 1.49554975e+00 , 1.51478835e+00 , 1.53277739e+00 , 1.54953255e+00 , 1.56506852e+00 , 1.57939895e+00 , 1.59253648e+00 , 1.60449275e+00 , 1.61527835e+00 , 1.62490290e+00 , 1.63337497e+00 , 1.64070213e+00 , 1.64689095e+00 , 1.65194696e+00 , 1.65587471e+00 , 1.65867773e+00 , 1.66035853e+00 , 1.66091863e+00 , 
1.91867121e-15 , 7.57291115e-02 , 1.49193213e-01 , 2.20432023e-01 , 2.89485142e-01 , 3.56391998e-01 , 4.21191787e-01 , 4.83923420e-01 , 5.44625465e-01 , 6.03336098e-01 , 6.60093052e-01 , 7.14933565e-01 , 7.67894335e-01 , 8.19011477e-01 , 8.68320478e-01 , 9.15856159e-01 , 9.61652640e-01 , 1.00574330e+00 , 1.04816075e+00 , 1.08893679e+00 , 1.12810242e+00 , 1.16568776e+00 , 1.20172206e+00 , 1.23623368e+00 , 1.26925008e+00 , 1.30079776e+00 , 1.33090230e+00 , 1.35958832e+00 , 1.38687946e+00 , 1.41279839e+00 , 1.43736681e+00 , 1.46060540e+00 , 1.48253386e+00 , 1.50317088e+00 , 1.52253416e+00 , 1.54064038e+00 , 1.55750521e+00 , 1.57314330e+00 , 1.58756831e+00 , 1.60079287e+00 , 1.61282860e+00 , 1.62368610e+00 , 1.63337497e+00 , 1.64190380e+00 , 1.64928014e+00 , 1.65551057e+00 , 1.66060063e+00 , 1.66455486e+00 , 1.66737679e+00 , 1.66906894e+00 , 1.66963282e+00 , 
1.92497394e-15 , 7.59815827e-02 , 1.49697802e-01 , 2.21188023e-01 , 2.90491498e-01 , 3.57647310e-01 , 4.22694317e-01 , 4.85671098e-01 , 5.46615898e-01 , 6.05566581e-01 , 6.62560576e-01 , 7.17634831e-01 , 7.70825767e-01 , 8.22169231e-01 , 8.71700462e-01 , 9.19454042e-01 , 9.65463865e-01 , 1.00976310e+00 , 1.05238417e+00 , 1.09335870e+00 , 1.13271749e+00 , 1.17049054e+00 , 1.20670695e+00 , 1.24139496e+00 , 1.27458189e+00 , 1.30629416e+00 , 1.33655726e+00 , 1.36539570e+00 , 1.39283308e+00 , 1.41889199e+00 , 1.44359406e+00 , 1.46695995e+00 , 1.48900931e+00 , 1.50976080e+00 , 1.52923208e+00 , 1.54743981e+00 , 1.56439964e+00 , 1.58012622e+00 , 1.59463317e+00 , 1.60793314e+00 , 1.62003772e+00 , 1.63095752e+00 , 1.64070213e+00 , 1.64928014e+00 , 1.65669912e+00 , 1.66296561e+00 , 1.66808518e+00 , 1.67206236e+00 , 1.67490068e+00 , 1.67660266e+00 , 1.67716982e+00 , 
1.94031075e-15 , 7.61946217e-02 , 1.50123583e-01 , 2.21825954e-01 , 2.91340693e-01 , 3.58706595e-01 , 4.23962232e-01 , 4.87145905e-01 , 5.48295590e-01 , 6.07448885e-01 , 6.64642965e-01 , 7.19914535e-01 , 7.73299780e-01 , 8.24834326e-01 , 8.74553195e-01 , 9.22490773e-01 , 9.68680763e-01 , 1.01315616e+00 , 1.05594921e+00 , 1.09709140e+00 , 1.13661339e+00 , 1.17454502e+00 , 1.21091531e+00 , 1.24575236e+00 , 1.27908342e+00 , 1.31093480e+00 , 1.34133191e+00 , 1.37029921e+00 , 1.39786021e+00 , 1.42403746e+00 , 1.44885255e+00 , 1.47232609e+00 , 1.49447769e+00 , 1.51532598e+00 , 1.53488860e+00 , 1.55318218e+00 , 1.57022237e+00 , 1.58602380e+00 , 1.60060007e+00 , 1.61396383e+00 , 1.62612666e+00 , 1.63709917e+00 , 1.64689095e+00 , 1.65551057e+00 , 1.66296561e+00 , 1.66926262e+00 , 1.67440716e+00 , 1.67840376e+00 , 1.68125595e+00 , 1.68296625e+00 , 1.68353619e+00 , 
1.94467474e-15 , 7.63685257e-02 , 1.50471150e-01 , 2.22346702e-01 , 2.92033903e-01 , 3.59571312e-01 , 4.24997270e-01 , 4.88349853e-01 , 5.49666813e-01 , 6.08985537e-01 , 6.66342993e-01 , 7.21775685e-01 , 7.75319606e-01 , 8.27010202e-01 , 8.76882322e-01 , 9.24970185e-01 , 9.71307343e-01 , 1.01592664e+00 , 1.05886020e+00 , 1.10013937e+00 , 1.13979470e+00 , 1.17785593e+00 , 1.21435196e+00 , 1.24931083e+00 , 1.28275968e+00 , 1.31472477e+00 , 1.34523143e+00 , 1.37430407e+00 , 1.40196614e+00 , 1.42824015e+00 , 1.45314765e+00 , 1.47670921e+00 , 1.49894441e+00 , 1.51987187e+00 , 1.53950919e+00 , 1.55787300e+00 , 1.57497892e+00 , 1.59084156e+00 , 1.60547455e+00 , 1.61889048e+00 , 1.63110097e+00 , 1.64211660e+00 , 1.65194696e+00 , 1.66060063e+00 , 1.66808518e+00 , 1.67440716e+00 , 1.67957212e+00 , 1.68358461e+00 , 1.68644815e+00 , 1.68816526e+00 , 1.68873747e+00 , 
1.93800404e-15 , 7.65035359e-02 , 1.50740983e-01 , 2.22750987e-01 , 2.92572083e-01 , 3.60242648e-01 , 4.25800845e-01 , 4.89284574e-01 , 5.50731417e-01 , 6.10178595e-01 , 6.67662914e-01 , 7.23220725e-01 , 7.76887874e-01 , 8.28699662e-01 , 8.78690807e-01 , 9.26895400e-01 , 9.73346871e-01 , 1.01807796e+00 , 1.06112067e+00 , 1.10250625e+00 , 1.14226518e+00 , 1.18042711e+00 , 1.21702085e+00 , 1.25207438e+00 , 1.28561477e+00 , 1.31766823e+00 , 1.34826004e+00 , 1.37741454e+00 , 1.40515518e+00 , 1.43150441e+00 , 1.45648374e+00 , 1.48011373e+00 , 1.50241393e+00 , 1.52340294e+00 , 1.54309835e+00 , 1.56151676e+00 , 1.57867379e+00 , 1.59458404e+00 , 1.60926112e+00 , 1.62271763e+00 , 1.63496517e+00 , 1.64601434e+00 , 1.65587471e+00 , 1.66455486e+00 , 1.67206236e+00 , 1.67840376e+00 , 1.68358461e+00 , 1.68760945e+00 , 1.69048182e+00 , 1.69220423e+00 , 1.69277820e+00 , 
1.94040816e-15 , 7.65998391e-02 , 1.50933457e-01 , 2.23039366e-01 , 2.92955972e-01 , 3.60721521e-01 , 4.26374050e-01 , 4.89951333e-01 , 5.51490831e-01 , 6.11029647e-01 , 6.68604473e-01 , 7.24251550e-01 , 7.78006617e-01 , 8.29904876e-01 , 8.79980948e-01 , 9.28268833e-01 , 9.74801877e-01 , 1.01961273e+00 , 1.06273334e+00 , 1.10419488e+00 , 1.14402774e+00 , 1.18226154e+00 , 1.21892502e+00 , 1.25404612e+00 , 1.28765186e+00 , 1.31976840e+00 , 1.35042099e+00 , 1.37963395e+00 , 1.40743068e+00 , 1.43383361e+00 , 1.45886424e+00 , 1.48254308e+00 , 1.50488970e+00 , 1.52592266e+00 , 1.54565955e+00 , 1.56411695e+00 , 1.58131048e+00 , 1.59725473e+00 , 1.61196330e+00 , 1.62544879e+00 , 1.63772281e+00 , 1.64879592e+00 , 1.65867773e+00 , 1.66737679e+00 , 1.67490068e+00 , 1.68125595e+00 , 1.68644815e+00 , 1.69048182e+00 , 1.69336049e+00 , 1.69508668e+00 , 1.69566191e+00 , 
1.95192802e-15 , 7.66575680e-02 , 1.51048835e-01 , 2.23212235e-01 , 2.93186095e-01 , 3.61008584e-01 , 4.26717663e-01 , 4.90351029e-01 , 5.51946074e-01 , 6.11539827e-01 , 6.69168913e-01 , 7.24869507e-01 , 7.78677285e-01 , 8.30627388e-01 , 8.80754380e-01 , 9.29092206e-01 , 9.75674161e-01 , 1.02053285e+00 , 1.06370017e+00 , 1.10520725e+00 , 1.14508445e+00 , 1.18336135e+00 , 1.22006666e+00 , 1.25522827e+00 , 1.28887321e+00 , 1.32102758e+00 , 1.35171663e+00 , 1.38096465e+00 , 1.40879502e+00 , 1.43523016e+00 , 1.46029156e+00 , 1.48399972e+00 , 1.50637418e+00 , 1.52743350e+00 , 1.54719527e+00 , 1.56567607e+00 , 1.58289149e+00 , 1.59885614e+00 , 1.61358360e+00 , 1.62708649e+00 , 1.63937638e+00 , 1.65046386e+00 , 1.66035853e+00 , 1.66906894e+00 , 1.67660266e+00 , 1.68296625e+00 , 1.68816526e+00 , 1.69220423e+00 , 1.69508668e+00 , 1.69681515e+00 , 1.69739113e+00 , 
1.94232947e-15 , 7.66768022e-02 , 1.51087277e-01 , 2.23269832e-01 , 2.93262768e-01 , 3.61104229e-01 , 4.26832148e-01 , 4.90484202e-01 , 5.52097754e-01 , 6.11709812e-01 , 6.69356978e-01 , 7.25075403e-01 , 7.78900745e-01 , 8.30868123e-01 , 8.81012082e-01 , 9.29366549e-01 , 9.75964802e-01 , 1.02083943e+00 , 1.06402231e+00 , 1.10554457e+00 , 1.14543655e+00 , 1.18372781e+00 , 1.22044706e+00 , 1.25562218e+00 , 1.28928017e+00 , 1.32144716e+00 , 1.35214836e+00 , 1.38140806e+00 , 1.40924964e+00 , 1.43569552e+00 , 1.46076717e+00 , 1.48448510e+00 , 1.50686884e+00 , 1.52793695e+00 , 1.54770701e+00 , 1.56619561e+00 , 1.58341833e+00 , 1.59938977e+00 , 1.61412354e+00 , 1.62763222e+00 , 1.63992740e+00 , 1.65101968e+00 , 1.66091863e+00 , 1.66963282e+00 , 1.67716982e+00 , 1.68353619e+00 , 1.68873747e+00 , 1.69277820e+00 , 1.69566191e+00 , 1.69739113e+00 , 1.69796737e+00  
};

  //project coordinates to left lower part of unit square
  // original coordinates (y0, z0) are in [0.0033,0.0067]^2
  double eps = 1e-8, val,yldist,zldist;
  double y1, z1, minimal, value;
  int i, iy, iz,iyl, iyr, izl, izr;

  // diameter of inlet (in each coordinate)
  // and lower boundary of inlet
  // general formula: see DrivenCavity3D_Bulk.h
 
  y1 = y0;
  if (y1>0.5)
      y1 = 1 - y1;
  z1 = z0;
  if (z1>0.5)
      z1 = 1 - z1;
  
  // find best fitting coordinates
  minimal = 1e10;
  for (i=0;i<n;i++)
  {
      if (fabs(y1-y[i]) <= minimal)
      {
	  iy = i;
	  minimal = fabs(y1-y[i]);
      }
  }
  //OutPut("min y" << minimal)
  minimal = 1e10;
  for (i=0;i<n;i++)
  {
      if (fabs(z1-z[i]) <= minimal)
      {
	  iz = i;
	  minimal = fabs(z1-z[i]);
      }
  }
  //OutPut(" min z " << minimal )

  // compute value
  value = u1[iy*n+iz];
  //OutPut(y1 << " " << z1 << " value " << value);
  //OutPut(" bdry value " << x0 << " " << y0 << " " << z0 << " " << value<< " : " << 
  //	 iy << " " << iz << " : " << endl);
  
  
  // use that there is a 100x100 grid for solving the Laplacian
  y1 =300.*(y1-1./3.);
  
  // find best fitting coordinates
  yldist = y1 - (int)(y1+eps);
  if (fabs(yldist)<1e-6)
  {
      iyl = iyr = (int)(y1+eps);
  }
  else
  {
      iyl = (int)(y1+eps);
      iyr = iyl + 1;
  }
  
  // use that there is a 100x100 grid for solving the Laplacian
 
  z1 =300.*(z1-1./3.);

  // find best fitting coordinates
  zldist = z1 - (int)(z1+eps);
  if (fabs(zldist)<1e-6)
  {
      izl = izr = (int)(z1+eps);
  }
  else
  {
      izl = (int)(z1+eps);
      izr = izl + 1;
  }

  value = yldist*zldist*u1[iyl*n+izl] + yldist*(1-zldist)*u1[iyl*n+izr] 
	   + (1-yldist)*zldist*u1[iyr*n+izl] + (1-yldist)*(1-zldist)*u1[iyr*n+izr];
 // OutPut(" :: " << iyl << " " << iyr << " " <<yldist << " : " 
   //<< izl <<  " "  << izr << " " << zldist << " : " << value << endl);
  return(value);
}

// ========================================================================
// initial solution
// ========================================================================

void InitialU1(double x, double y, double z, double *values)
{
  values[0] = 0.0;
}

void InitialU2(double x, double y, double z, double *values)
{
  values[0] = 0;
}

void InitialU3(double x, double y, double z, double *values)
{
  values[0] = 0;
}

void InitialP(double x, double y,  double z, double *values)
{
  values[0] = 0;
}

// ========================================================================
// exact solution
// ========================================================================
void ExactU1(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactU2(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactU3(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactP(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

// ========================================================================
// boundary conditions
// ========================================================================

// kind of boundary condition (for FE space needed)
void BoundCondition(double x, double y, double z, BoundCond &cond)
{
  double eps = 1e-8;

  cond = DIRICHLET;

  if (fabs(x-210)<eps)
  {
       // outflow 
       cond = NEUMANN;
       //OutPut("neum");
       TDatabase::ParamDB->INTERNAL_PROJECT_PRESSURE = 0;
  }
}

// value of boundary condition
void U1BoundValue(double x, double y, double z, double &value)
{
  double eps = 1e-8;

  value = 0.0;

  // inflow
  if ((fabs(x)<eps)&& (y>=1.0/3) && (y<=2.0/3) &&
      (z>=1.0/3) && (z<=2.0/3))
  {
      //value = 1.0;
      value = DirichletDataFromPoissonSolve(x,y,z)*TDatabase::ParamDB->UREA_INFLOW_SCALE
               /TDatabase::ParamDB->UREA_u_infty;
      //OutPut(" v " << value);
  }
}

// value of boundary condition
void U2BoundValue(double x, double y, double z, double &value)
{
  value = 0;
}

// value of boundary condition
void U3BoundValue(double x, double y, double z, double &value)
{
  value = 0;
}

// ========================================================================
// coefficients for Stokes form: A, B1, B2, B3, f1, f2, f3
// ========================================================================
void LinCoeffs(int n_points, double *x, double *y, double *z,
               double **parameters, double **coeffs)
{
  double eps;
  int i;
  double *coeff;
  // reference values
  double L_infty = TDatabase::ParamDB->UREA_l_infty;
  double U_infty = TDatabase::ParamDB->UREA_u_infty;
  double nu = TDatabase::ParamDB->UREA_nu;

  eps =  nu/(L_infty*U_infty);
  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];

    coeff[0] = eps;
    coeff[1] = 0; // f1
    coeff[2] = 0; // f2
    coeff[3] = 0; // f3
  }
}

// ========================================================================
// definitions for the temperature
// ========================================================================

// initial conditon
void InitialCondition_temp(double x, double y, double z, double *values)
{
  values[0] = 301.15/TDatabase::ParamDB->UREA_temp_infty;
}

// kind of boundary condition (for FE space needed)
void BoundCondition_temp(double x, double y, double z, BoundCond &cond)
{
    // this will be set correctly in CheckWrongNeumannNodes_temp 
    cond = NEUMANN;
}

// value of boundary condition
//void BoundValue_c_A(int BdComp, double Param, double &value)
void BoundValue_temp(double x, double y, double z, double &value)
{
  double eps = 1e-8;

  value = 0;
  if (TDatabase::TimeDB->CURRENTTIME >= TDatabase::TimeDB->T1*0)
  {
    // inflow
    if ((fabs(x)<eps)&& (y>=0.33333333) && (y<=0.66666667) &&
      (z>=0.33333333) && (z<=0.66666667))
    {
      value = 301.15/TDatabase::ParamDB->UREA_temp_infty;
    } 
    else
    {
      // outlet
      if ((fabs(x-210)<eps)&&(fabs(y)>eps)&&(fabs(z)>eps)&&(fabs(y-1.0)>eps)&&(fabs(z-1.0)>eps))
	  value = 0;
      else
	  value = 291.15/TDatabase::ParamDB->UREA_temp_infty;
    }
  }
}

void NoCoeffs(int n_points, double *X, double *Y, double *Z,
              double **parameters, double **coeffs)
{
  return;
}

void BilinearCoeffs_temp(int n_points, double *X, double *Y, double *Z,
                    double **parameters, double **coeffs)
{

  int i;
  double *coeff, *param;
  double x, y, z;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double L_infty = TDatabase::ParamDB->UREA_l_infty;
  double U_infty = TDatabase::ParamDB->UREA_u_infty;
  double rho = TDatabase::ParamDB->UREA_rho;
  double c_p = TDatabase::ParamDB->UREA_c_p;
  double lambda = TDatabase::ParamDB->UREA_lambda;
  double eps, c;

  eps = lambda/(L_infty*U_infty*rho*c_p);

  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    param = parameters[i];

    coeff[0] = eps;
    coeff[1] = param[0]; // u1
    coeff[2] = param[1]; // u2
    coeff[3] = param[2]; // u3
    coeff[4] = 0;
    coeff[5] = 0;
    //OutPut(param[0] << " " << param[1] << " " << param[2] <<  " : ");
  }
}

/****************************************************************/
/* finds the nodes which are Neumann and should be Dirichlet    */
/* for FEM_FCT schemes                                          */
/****************************************************************/

void CheckWrongNeumannNodes_temp(TCollection *Coll, TFESpace3D *fespace,
				int &N_neum_to_diri, int* &neum_to_diri,
				double* &neum_to_diri_x, 
				double* &neum_to_diri_y,
				double* &neum_to_diri_z) 
{
  const int max_entries = 44000;
  int i, j, N_, min_val;
  int N_Cells, N_V, diri_counter = 0, found, diri_counter_1 = 0;
  int *global_numbers, *begin_index, *dof;
  int boundary_vertices[8], tmp_diri[max_entries]; 
  double x[8], y[8], z[8], eps = 1e-8, tmp_x[max_entries], tmp_y[max_entries], tmp_z[max_entries];
  TBaseCell *cell;
  TVertex *vertex;
  FE3D CurrentElement;

  // number of mesh cells
  N_Cells = Coll->GetN_Cells();
  // array with global numbers of d.o.f.
  global_numbers = fespace->GetGlobalNumbers();
  // array which points to the beginning of the global numbers in
  // global_numbers for each mesh cell
  begin_index = fespace->GetBeginIndex();

  diri_counter = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_V = cell->GetN_Vertices();
    found = 0;
    for (j=0;j<N_V;j++)
    {
      // read coordinates of the mesh cell
      boundary_vertices[j] = 0;
      vertex = cell->GetVertex(j);
      vertex->GetCoords(x[j], y[j], z[j]);
      // vertex on the boundary 
      if ((fabs(x[j])<eps) || (fabs(y[j])<eps) || (fabs(z[j])<eps)  || 
	   (fabs(y[j]-1)<eps) || (fabs(z[j]-1)<eps))
      {
        boundary_vertices[j] = 1;
        found++;
      }
    }
    // no cell with face with vertex on the boundary
    if (found<3)
      continue;
    // finite element on the mesh cell
    CurrentElement = fespace->GetFE3D(i, cell);
    // number of basis functions (= number of d.o.f.)
    N_ = TFEDatabase3D::GetN_BaseFunctFromFE3D(CurrentElement);
    // the array which gives the mapping of the local to the global d.o.f.
    dof = global_numbers+begin_index[i];
    switch(CurrentElement)
    {
      // P_1, Q_1
      case C_P1_3D_T_A:
      case C_Q1_3D_H_A:
      case C_Q1_3D_H_M:
        for (j=0;j<N_V;j++)
        {
          // vertex on the boundary
          if (boundary_vertices[j])
          {
	      // tetrahedron
	      if (CurrentElement==C_P1_3D_T_A)
		  tmp_diri[diri_counter] = dof[j];
	      else
	      {
		  switch(j)
		  {
		      case 0:
		      case 1:
		      case 4:
		      case 5:
			  tmp_diri[diri_counter] = dof[j];
			  break;
		      case 2:
			  tmp_diri[diri_counter] = dof[3];
			  break;
		      case 3:
			  tmp_diri[diri_counter] = dof[2];
			  break;
		      case 6:
			  tmp_diri[diri_counter] = dof[7];
			  break;
		      case 7:
			  tmp_diri[diri_counter] = dof[6];
			  break;
		  }
	      }
	      if (diri_counter > max_entries)
	      {
		  OutPut("tmp_diri too short !!!"<<endl);
		  exit(4711);
	      }
	      if ((fabs(x[j])<eps) || (fabs(y[j])<eps) || (fabs(z[j])<eps)  || 
		  (fabs(y[j]-1)<eps) || (fabs(z[j]-1)<eps))
	      {
		  tmp_x[diri_counter] = x[j];
		  tmp_y[diri_counter] = y[j];
		  tmp_z[diri_counter] = z[j];
	      }
	     // OutPut( tmp_diri[diri_counter] << " " <<
	     // 	      tmp_x[diri_counter] << " " << tmp_y[diri_counter] 
	      //	      << " " << tmp_z[diri_counter]  << endl);
	      diri_counter++;
          }
        }
	//OutPut(endl);
        break;
	default:
	    OutPut("CheckWrongNeumannNodes_temp not implemented for element "
		   << CurrentElement << endl);
	    OutPut("code can be run without CheckWrongNeumannNodes_temp, just delete the exit" << endl);
	    exit(4711);
    }
  }
  
  // condense
  for (i=0;i<diri_counter;i++)
  {
      if (tmp_diri[i] == -1)
	  continue;
      diri_counter_1++;
      for (j=i+1;j<diri_counter;j++)
      {
	  if (tmp_diri[i] == tmp_diri[j])
	  {
	      tmp_diri[j] = -1;
	  }
      }
  }
  
  OutPut("CheckWrongNeumannNodes_temp: N_neum_to_diri " << diri_counter_1 << endl);
  N_neum_to_diri = diri_counter_1;
  // allocate array for the indices
  neum_to_diri = new int[diri_counter_1];
  // allocate array for the corresponding x coordinate
  neum_to_diri_x = new double[diri_counter_1];
  // allocate array for the corresponding y coordinate
  neum_to_diri_y = new double[diri_counter_1];
  // allocate array for the corresponding z coordinate
  neum_to_diri_z = new double[diri_counter_1];

  // fill array and sort
  for (i=0;i<diri_counter_1;i++)
  {
    min_val = tmp_diri[0];
    found = 0;
    for (j=1;j<diri_counter;j++)
    {
      if ((tmp_diri[j]>-1) && ((tmp_diri[j] < min_val) ||
        (min_val == -1)))
      {
        min_val =  tmp_diri[j];
        found = j;
      }
    }
    neum_to_diri[i] = tmp_diri[found];
    neum_to_diri_x[i] = tmp_x[found];
    neum_to_diri_y[i] = tmp_y[found];
    neum_to_diri_z[i] = tmp_z[found];
    tmp_diri[found] = -1;
  }

 // for (i=0;i<diri_counter_1;i++)
 // {
  //  OutPut(i << " " << neum_to_diri[i] << " " << neum_to_diri_x[i]  <<
  //    " " << neum_to_diri_y[i]  <<  " " << neum_to_diri_z[i]  << endl);
 // }
}

// ========================================================================
// definitions for the concentration
// ========================================================================

// initial condition
void InitialCondition_conc(double x, double y, double z, double *values)
{
  values[0] = 0;
}

// kind of boundary condition (for FE space needed)
void BoundCondition_conc(double x, double y, double z, BoundCond &cond)
{
   cond = NEUMANN;
}

// value of boundary condition
void BoundValue_conc(double x, double y, double z, double &value)
{
  double eps = 1e-8, val, temp;

  value = 0;
  // inflow
  if (TDatabase::TimeDB->CURRENTTIME >= TDatabase::TimeDB->T1)
  {
    if ((fabs(x)<eps)&& (y>=0.33333333) && (y<=0.66666667) &&
      (z>=0.33333333) && (z<=0.66666667))
      {
	BoundValue_temp(x,y,z,temp);
	val = TDatabase::ParamDB->UREA_rho_sat_1+TDatabase::ParamDB->UREA_rho_sat_2*(temp - 273.15); 
        value = val/(TDatabase::ParamDB->UREA_c_infty*TDatabase::ParamDB->UREA_m_mol);
      }
  }
}

// param[3] : concentration
// param[4] : temperature
// param[5] : integral
void BilinearCoeffs_conc(int n_points, double *X, double *Y, double *Z,
                         double **parameters, double **coeffs)
{

  int i;
  double *coeff, *param;
  double x, y;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double l_infty = TDatabase::ParamDB->UREA_l_infty;
  double u_infty = TDatabase::ParamDB->UREA_u_infty;
  double c_infty = TDatabase::ParamDB->UREA_c_infty;
  double temp_infty = TDatabase::ParamDB->UREA_temp_infty;
  double D_j = TDatabase::ParamDB->UREA_D_J;
  double L_min = TDatabase::ParamDB->UREA_D_P_0;
  double L_max = TDatabase::ParamDB->UREA_D_P_MAX;
  double k_v = TDatabase::ParamDB->UREA_k_v;
  double f_infty = TDatabase::ParamDB->UREA_f_infty;
  double rho_d =  TDatabase::ParamDB->UREA_rho_d;
  double m_mol =  TDatabase::ParamDB->UREA_m_mol;
  double sat_1 =  TDatabase::ParamDB->UREA_rho_sat_1;
  double sat_2 =  TDatabase::ParamDB->UREA_rho_sat_2;
  double eps, G, T_infty, lambda_nuc_fac, lambda_nuc;
  double d_p_min, rho_sat, const_nuc_fac, const_nuc, B_nuc;

  // compute derived quantities of the model
  T_infty = l_infty/u_infty;
  d_p_min = L_min/L_max;

  // compute coefficients of the equation
  eps = D_j/(l_infty*u_infty);
  // without G(c)
  lambda_nuc_fac = 3*rho_d*k_v*f_infty*l_infty*L_max*L_max*L_max/(m_mol*c_infty*u_infty);
  const_nuc_fac =  rho_d*k_v*L_min*L_min*L_min*l_infty/(m_mol*c_infty*u_infty);

  //OutPut("nuc " << lambda_nuc_fac << endl);
  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    param = parameters[i];
   
    //OutPut(" 0 " << param[0] << " 1 " << param[1] << " 2 " << param[2] <<
    // " 3 " << param[3] << " 4 " << param[4] << " 5 " << param[5] << endl);
    // grow rate
    G = growth_rate(param[3],param[4]);
    // complete definition of lambda_nuc
    lambda_nuc = lambda_nuc_fac * G;
    B_nuc = b_nuc(param[3],param[4]);
    const_nuc = B_nuc * const_nuc_fac; 
    
    coeff[0] = eps;
    coeff[1] = param[0]; // u1
    coeff[2] = param[1]; // u2
    coeff[3] = param[2]; // u3
    coeff[4] = 0;
    coeff[5] = -lambda_nuc*param[5]-const_nuc;//r_chem - r_nuc - r_g
  }
}

void CheckWrongNeumannNodes_conc(TCollection *Coll, TFESpace3D *fespace,
				int &N_neum_to_diri, int* &neum_to_diri,
				double* &neum_to_diri_x, 
				double* &neum_to_diri_y,
				double* &neum_to_diri_z) 
{
  const int max_entries = 16000;
  int i, j, N_, min_val;
  int N_Cells, N_V, diri_counter = 0, found, diri_counter_1 = 0;
  int *global_numbers, *begin_index, *dof;
  int boundary_vertices[8], tmp_diri[max_entries]; 
  double x[8], y[8], z[8], eps = 1e-8, tmp_x[max_entries], tmp_y[max_entries], tmp_z[max_entries];
  TBaseCell *cell;
  TVertex *vertex;
  FE3D CurrentElement;

  // number of mesh cells
  N_Cells = Coll->GetN_Cells();
  // array with global numbers of d.o.f.
  global_numbers = fespace->GetGlobalNumbers();
  // array which points to the beginning of the global numbers in
  // global_numbers for each mesh cell
  begin_index = fespace->GetBeginIndex();

  diri_counter = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_V = cell->GetN_Vertices();
    found = 0;
    for (j=0;j<N_V;j++)
    {
      // read coordinates of the mesh cell
      boundary_vertices[j] = 0;
      vertex = cell->GetVertex(j);
      vertex->GetCoords(x[j], y[j], z[j]);
      // vertex on the boundary 
      if ((fabs(x[j])<eps)&& (y[j]>=0.33333333) && (y[j]<=0.66666667) &&
	  (z[j]>=0.33333333) && (z[j]<=0.66666667))
      {
        boundary_vertices[j] = 1;
        found++;
      }
    }
    // no cell with face with vertex on the boundary
    if (found<3)
      continue;
    // finite element on the mesh cell
    CurrentElement = fespace->GetFE3D(i, cell);
    // number of basis functions (= number of d.o.f.)
    N_ = TFEDatabase3D::GetN_BaseFunctFromFE3D(CurrentElement);
    // the array which gives the mapping of the local to the global d.o.f.
    dof = global_numbers+begin_index[i];
    switch(CurrentElement)
    {
      // P_1, Q_1
      case C_P1_3D_T_A:
      case C_Q1_3D_H_A:
      case C_Q1_3D_H_M:
        for (j=0;j<N_V;j++)
        {
          // vertex on the boundary
          if (boundary_vertices[j])
          {
	      // tetrahedron
	      if (CurrentElement==C_P1_3D_T_A)
		  tmp_diri[diri_counter] = dof[j];
	      else
	      {
		  switch(j)
		  {
		      case 0:
		      case 1:
		      case 4:
		      case 5:
			  tmp_diri[diri_counter] = dof[j];
			  break;
		      case 2:
			  tmp_diri[diri_counter] = dof[3];
			  break;
		      case 3:
			  tmp_diri[diri_counter] = dof[2];
			  break;
		      case 6:
			  tmp_diri[diri_counter] = dof[7];
			  break;
		      case 7:
			  tmp_diri[diri_counter] = dof[6];
			  break;
		  }
	      }
	      if (diri_counter > max_entries)
	      {
		  OutPut("tmp_diri too short !!!"<<endl);
		  exit(4711);
	      }
	      if ((fabs(x[j])<eps)&& (y[j]>=0.33333333) && (y[j]<=0.66666667) &&
		  (z[j]>=0.33333333) && (z[j]<=0.66666667))
	      {
		  tmp_x[diri_counter] = x[j];
		  tmp_y[diri_counter] = y[j];
		  tmp_z[diri_counter] = z[j];
	      }
	     // OutPut( tmp_diri[diri_counter] << " " <<
	     //	      tmp_x[diri_counter] << " " << tmp_y[diri_counter] 
	      //	      << " " << tmp_z[diri_counter]  << endl);
	      diri_counter++;
          }
        }
	//OutPut(endl);
        break;
	default:
	    OutPut("CheckWrongNeumannNodes_temp not implemented for element "
		   << CurrentElement << endl);
	    OutPut("code can be run without CheckWrongNeumannNodes_temp, just delete the exit" << endl);
	    exit(4711);
    }
  }
  
  // condense
  for (i=0;i<diri_counter;i++)
  {
      if (tmp_diri[i] == -1)
	  continue;
      diri_counter_1++;
      for (j=i+1;j<diri_counter;j++)
      {
	  if (tmp_diri[i] == tmp_diri[j])
	  {
	      tmp_diri[j] = -1;
	  }
      }
  }
  
  OutPut("CheckWrongNeumannNodes_conc: N_neum_to_diri " << diri_counter_1 << endl);
  N_neum_to_diri = diri_counter_1;
  // allocate array for the indices
  neum_to_diri = new int[diri_counter_1];
  // allocate array for the corresponding x coordinate
  neum_to_diri_x = new double[diri_counter_1];
  // allocate array for the corresponding y coordinate
  neum_to_diri_y = new double[diri_counter_1];
  // allocate array for the corresponding z coordinate
  neum_to_diri_z = new double[diri_counter_1];

  // fill array and sort
  for (i=0;i<diri_counter_1;i++)
  {
    min_val = tmp_diri[0];
    found = 0;
    for (j=1;j<diri_counter;j++)
    {
      if ((tmp_diri[j]>-1) && ((tmp_diri[j] < min_val) ||
        (min_val == -1)))
      {
        min_val =  tmp_diri[j];
        found = j;
      }
    }
    neum_to_diri[i] = tmp_diri[found];
    neum_to_diri_x[i] = tmp_x[found];
    neum_to_diri_y[i] = tmp_y[found];
    neum_to_diri_z[i] = tmp_z[found];
    tmp_diri[found] = -1;
  }

 // for (i=0;i<diri_counter_1;i++)
 // {
 //   OutPut(i << " " << neum_to_diri[i] << " " << neum_to_diri_x[i]  <<
 //     " " << neum_to_diri_y[i]  <<  " " << neum_to_diri_z[i]  << endl);
 // }
}
