// Navier-Stokes problem, Driven cavity
//
// u(x,y) = unknown
// p(x,y) = unknown

#define __UREA__

void ExampleFile()
{
  OutPut("Example: Harnstoff.h " << endl);
  // set some parameters
/*
  TDatabase::ParamDB->BULK_D_P_MIN = TDatabase::ParamDB->BULK_D_P_0/TDatabase::ParamDB->BULK_D_P_MAX;
  TDatabase::ParamDB->BULK_c_C_infty = TDatabase::ParamDB->BULK_c_C_infty_sat 
      * exp(TDatabase::ParamDB->BULK_C_2/TDatabase::ParamDB->BULK_D_P_0);
  TDatabase::ParamDB->BULK_f_infty = TDatabase::ParamDB->BULK_u_infty/(TDatabase::ParamDB->BULK_C_g
      *TDatabase::ParamDB->BULK_k_g*pow(TDatabase::ParamDB->BULK_D_P_MAX,3)*TDatabase::ParamDB->BULK_l_infty);
  OutPut("BULK d_p_min " << TDatabase::ParamDB->BULK_D_P_MIN  <<
	 " c_C_infty " << TDatabase::ParamDB->BULK_c_C_infty <<
	 " f_infty " << TDatabase::ParamDB->BULK_f_infty << endl);
  OutPut("inflow (u_infty)" << TDatabase::ParamDB->BULK_u_infty);
  OutPut(" upper lid " << TDatabase::ParamDB->P5);
  TDatabase::ParamDB->P6 = 1.0/16;
  OutPut(" radius of inlets (P6) " << TDatabase::ParamDB->P6);
*/
}

double DirichletDataFromPoissonSolve(double x0, double y0, double z0)
{
    int n = 51;

double y[51] = { 0.00000000e+00, 1.00000000e-02, 2.00000000e-02, 3.00000000e-02, 4.00000000e-02, 5.00000000e-02, 6.00000000e-02, 7.00000000e-02, 8.00000000e-02, 9.00000000e-02, 1.00000000e-01, 1.10000000e-01, 1.20000000e-01, 1.30000000e-01, 1.40000000e-01, 1.50000000e-01, 1.60000000e-01, 1.70000000e-01, 1.80000000e-01, 1.90000000e-01, 2.00000000e-01, 2.10000000e-01, 2.20000000e-01, 2.30000000e-01, 2.40000000e-01, 2.50000000e-01, 2.60000000e-01, 2.70000000e-01, 2.80000000e-01, 2.90000000e-01, 3.00000000e-01, 3.10000000e-01, 3.20000000e-01, 3.30000000e-01, 3.40000000e-01, 3.50000000e-01, 3.60000000e-01, 3.70000000e-01, 3.80000000e-01, 3.90000000e-01, 4.00000000e-01, 4.10000000e-01, 4.20000000e-01, 4.30000000e-01, 4.40000000e-01, 4.50000000e-01, 4.60000000e-01, 4.70000000e-01, 4.80000000e-01, 4.90000000e-01, 5.00000000e-01, };
double z[51] = { 0.00000000e+00, 1.00000000e-02, 2.00000000e-02, 3.00000000e-02, 4.00000000e-02, 5.00000000e-02, 6.00000000e-02, 7.00000000e-02, 8.00000000e-02, 9.00000000e-02, 1.00000000e-01, 1.10000000e-01, 1.20000000e-01, 1.30000000e-01, 1.40000000e-01, 1.50000000e-01, 1.60000000e-01, 1.70000000e-01, 1.80000000e-01, 1.90000000e-01, 2.00000000e-01, 2.10000000e-01, 2.20000000e-01, 2.30000000e-01, 2.40000000e-01, 2.50000000e-01, 2.60000000e-01, 2.70000000e-01, 2.80000000e-01, 2.90000000e-01, 3.00000000e-01, 3.10000000e-01, 3.20000000e-01, 3.30000000e-01, 3.40000000e-01, 3.50000000e-01, 3.60000000e-01, 3.70000000e-01, 3.80000000e-01, 3.90000000e-01, 4.00000000e-01, 4.10000000e-01, 4.20000000e-01, 4.30000000e-01, 4.40000000e-01, 4.50000000e-01, 4.60000000e-01, 4.70000000e-01, 4.80000000e-01, 4.90000000e-01, 5.00000000e-01, };
double u1[2601] = { 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
0.00000000e+00, 7.89034699e-03, 1.42837393e-02, 1.98119407e-02, 2.47479462e-02, 2.92359137e-02, 3.33640340e-02, 3.71916405e-02, 4.07613274e-02, 4.41051329e-02, 4.72480207e-02, 5.02099815e-02, 5.30073795e-02, 5.56538511e-02, 5.81609308e-02, 6.05384971e-02, 6.27951015e-02, 6.49382140e-02, 6.69744120e-02, 6.89095269e-02, 7.07487595e-02, 7.24967724e-02, 7.41577653e-02, 7.57355356e-02, 7.72335290e-02, 7.86548816e-02, 8.00024546e-02, 8.12788646e-02, 8.24865081e-02, 8.36275831e-02, 8.47041082e-02, 8.57179375e-02, 8.66707749e-02, 8.75641861e-02, 8.83996086e-02, 8.91783613e-02, 8.99016517e-02, 9.05705836e-02, 9.11861626e-02, 9.17493020e-02, 9.22608270e-02, 9.27214788e-02, 9.31319186e-02, 9.34927302e-02, 9.38044231e-02, 9.40674343e-02, 9.42821305e-02, 9.44488097e-02, 9.45677026e-02, 9.46389728e-02, 9.46627187e-02, 
0.00000000e+00, 1.42837393e-02, 2.65389041e-02, 3.73525211e-02, 4.70901523e-02, 5.59817909e-02, 6.41805180e-02, 7.17940940e-02, 7.89019763e-02, 8.55649591e-02, 9.18309600e-02, 9.77386634e-02, 1.03319924e-01, 1.08601406e-01, 1.13605740e-01, 1.18352362e-01, 1.22858132e-01, 1.27137803e-01, 1.31204387e-01, 1.35069432e-01, 1.38743246e-01, 1.42235083e-01, 1.45553279e-01, 1.48705381e-01, 1.51698238e-01, 1.54538087e-01, 1.57230620e-01, 1.59781047e-01, 1.62194139e-01, 1.64474274e-01, 1.66625472e-01, 1.68651428e-01, 1.70555539e-01, 1.72340926e-01, 1.74010453e-01, 1.75566752e-01, 1.77012230e-01, 1.78349089e-01, 1.79579335e-01, 1.80704789e-01, 1.81727098e-01, 1.82647741e-01, 1.83468038e-01, 1.84189152e-01, 1.84812101e-01, 1.85337757e-01, 1.85766851e-01, 1.86099979e-01, 1.86337601e-01, 1.86480044e-01, 1.86527503e-01, 
0.00000000e+00, 1.98119407e-02, 3.73525211e-02, 5.31022381e-02, 6.74208604e-02, 8.05679848e-02, 9.27322078e-02, 1.04053816e-01, 1.14640018e-01, 1.24574846e-01, 1.33925663e-01, 1.42747521e-01, 1.51086168e-01, 1.58980167e-01, 1.66462422e-01, 1.73561316e-01, 1.80301556e-01, 1.86704823e-01, 1.92790282e-01, 1.98574975e-01, 2.04074145e-01, 2.09301486e-01, 2.14269358e-01, 2.18988955e-01, 2.23470449e-01, 2.27723110e-01, 2.31755405e-01, 2.35575085e-01, 2.39189253e-01, 2.42604431e-01, 2.45826612e-01, 2.48861304e-01, 2.51713571e-01, 2.54388069e-01, 2.56889075e-01, 2.59220514e-01, 2.61385980e-01, 2.63388762e-01, 2.65231854e-01, 2.66917978e-01, 2.68449594e-01, 2.69828910e-01, 2.71057898e-01, 2.72138299e-01, 2.73071633e-01, 2.73859202e-01, 2.74502101e-01, 2.75001218e-01, 2.75357242e-01, 2.75570661e-01, 2.75641768e-01, 
0.00000000e+00, 2.47479462e-02, 4.70901523e-02, 6.74208604e-02, 8.60660568e-02, 1.03283828e-01, 1.19275726e-01, 1.34199758e-01, 1.48181297e-01, 1.61321315e-01, 1.73702382e-01, 1.85392992e-01, 1.96450715e-01, 2.06924508e-01, 2.16856442e-01, 2.26283010e-01, 2.35236120e-01, 2.43743885e-01, 2.51831227e-01, 2.59520371e-01, 2.66831234e-01, 2.73781749e-01, 2.80388126e-01, 2.86665066e-01, 2.92625944e-01, 2.98282965e-01, 3.03647284e-01, 3.08729121e-01, 3.13537852e-01, 3.18082090e-01, 3.22369752e-01, 3.26408120e-01, 3.30203893e-01, 3.33763230e-01, 3.37091794e-01, 3.40194780e-01, 3.43076951e-01, 3.45742662e-01, 3.48195883e-01, 3.50440219e-01, 3.52478933e-01, 3.54314953e-01, 3.55950893e-01, 3.57389064e-01, 3.58631479e-01, 3.59679868e-01, 3.60535683e-01, 3.61200102e-01, 3.61674039e-01, 3.61958142e-01, 3.62052800e-01, 
0.00000000e+00, 2.92359137e-02, 5.59817909e-02, 8.05679848e-02, 1.03283828e-01, 1.24372945e-01, 1.44036334e-01, 1.62438774e-01, 1.79715659e-01, 1.95979007e-01, 2.11322343e-01, 2.25824515e-01, 2.39552639e-01, 2.52564370e-01, 2.64909658e-01, 2.76632115e-01, 2.87770087e-01, 2.98357507e-01, 3.08424574e-01, 3.17998302e-01, 3.27102970e-01, 3.35760487e-01, 3.43990696e-01, 3.51811627e-01, 3.59239709e-01, 3.66289951e-01, 3.72976089e-01, 3.79310721e-01, 3.85305414e-01, 3.90970804e-01, 3.96316673e-01, 4.01352027e-01, 4.06085151e-01, 4.10523673e-01, 4.14674603e-01, 4.18544379e-01, 4.22138904e-01, 4.25463577e-01, 4.28523322e-01, 4.31322614e-01, 4.33865497e-01, 4.36155609e-01, 4.38196195e-01, 4.39990121e-01, 4.41539889e-01, 4.42847648e-01, 4.43915200e-01, 4.44744010e-01, 4.45335211e-01, 4.45689610e-01, 4.45807690e-01, 
0.00000000e+00, 3.33640340e-02, 6.41805180e-02, 9.27322078e-02, 1.19275726e-01, 1.44036334e-01, 1.67207605e-01, 1.88954069e-01, 2.09415089e-01, 2.28708873e-01, 2.46936118e-01, 2.64183109e-01, 2.80524267e-01, 2.96024211e-01, 3.10739418e-01, 3.24719559e-01, 3.38008573e-01, 3.50645540e-01, 3.62665389e-01, 3.74099484e-01, 3.84976098e-01, 3.95320816e-01, 4.05156862e-01, 4.14505385e-01, 4.23385688e-01, 4.31815435e-01, 4.39810813e-01, 4.47386688e-01, 4.54556723e-01, 4.61333493e-01, 4.67728576e-01, 4.73752636e-01, 4.79415496e-01, 4.84726197e-01, 4.89693061e-01, 4.94323729e-01, 4.98625213e-01, 5.02603929e-01, 5.06265729e-01, 5.09615933e-01, 5.12659352e-01, 5.15400314e-01, 5.17842679e-01, 5.19989860e-01, 5.21844836e-01, 5.23410163e-01, 5.24687988e-01, 5.25680056e-01, 5.26387716e-01, 5.26811929e-01, 5.26953270e-01, 
0.00000000e+00, 3.71916405e-02, 7.17940940e-02, 1.04053816e-01, 1.34199758e-01, 1.62438774e-01, 1.88954069e-01, 2.13905878e-01, 2.37433438e-01, 2.59657475e-01, 2.80682766e-01, 3.00600497e-01, 3.19490345e-01, 3.37422246e-01, 3.54457880e-01, 3.70651909e-01, 3.86053002e-01, 4.00704682e-01, 4.14646032e-01, 4.27912285e-01, 4.40535317e-01, 4.52544055e-01, 4.63964830e-01, 4.74821674e-01, 4.85136565e-01, 4.94929651e-01, 5.04219426e-01, 5.13022897e-01, 5.21355716e-01, 5.29232303e-01, 5.36665947e-01, 5.43668902e-01, 5.50252462e-01, 5.56427032e-01, 5.62202192e-01, 5.67586749e-01, 5.72588783e-01, 5.77215693e-01, 5.81474232e-01, 5.85370539e-01, 5.88910172e-01, 5.92098125e-01, 5.94938860e-01, 5.97436320e-01, 5.99593948e-01, 6.01414698e-01, 6.02901053e-01, 6.04055029e-01, 6.04878189e-01, 6.05371641e-01, 6.05536052e-01, 
0.00000000e+00, 4.07613274e-02, 7.89019763e-02, 1.14640018e-01, 1.48181297e-01, 1.79715659e-01, 2.09415089e-01, 2.37433438e-01, 2.63907241e-01, 2.88957153e-01, 3.12689650e-01, 3.35198739e-01, 3.56567588e-01, 3.76869968e-01, 3.96171536e-01, 4.14530927e-01, 4.32000693e-01, 4.48628099e-01, 4.64455798e-01, 4.79522404e-01, 4.93862982e-01, 5.07509458e-01, 5.20490974e-01, 5.32834194e-01, 5.44563558e-01, 5.55701514e-01, 5.66268704e-01, 5.76284139e-01, 5.85765339e-01, 5.94728466e-01, 6.03188432e-01, 6.11158999e-01, 6.18652864e-01, 6.25681733e-01, 6.32256392e-01, 6.38386762e-01, 6.44081953e-01, 6.49350310e-01, 6.54199453e-01, 6.58636313e-01, 6.62667165e-01, 6.66297653e-01, 6.69532818e-01, 6.72377117e-01, 6.74834442e-01, 6.76908135e-01, 6.78601004e-01, 6.79915330e-01, 6.80852878e-01, 6.81414906e-01, 6.81602165e-01, 
0.00000000e+00, 4.41051329e-02, 8.55649591e-02, 1.24574846e-01, 1.61321315e-01, 1.95979007e-01, 2.28708873e-01, 2.59657475e-01, 2.88957153e-01, 3.16726758e-01, 3.43072721e-01, 3.68090247e-01, 3.91864534e-01, 4.14471921e-01, 4.35980944e-01, 4.56453277e-01, 4.75944563e-01, 4.94505137e-01, 5.12180650e-01, 5.29012615e-01, 5.45038872e-01, 5.60293993e-01, 5.74809631e-01, 5.88614822e-01, 6.01736245e-01, 6.14198455e-01, 6.26024075e-01, 6.37233972e-01, 6.47847411e-01, 6.57882183e-01, 6.67354724e-01, 6.76280219e-01, 6.84672692e-01, 6.92545085e-01, 6.99909330e-01, 7.06776411e-01, 7.13156422e-01, 7.19058612e-01, 7.24491433e-01, 7.29462576e-01, 7.33979006e-01, 7.38046991e-01, 7.41672132e-01, 7.44859381e-01, 7.47613063e-01, 7.49936895e-01, 7.51833997e-01, 7.53306907e-01, 7.54357589e-01, 7.54987441e-01, 7.55197298e-01, 
0.00000000e+00, 4.72480207e-02, 9.18309600e-02, 1.33925663e-01, 1.73702382e-01, 2.11322343e-01, 2.46936118e-01, 2.80682766e-01, 3.12689650e-01, 3.43072721e-01, 3.71937146e-01, 3.99378105e-01, 4.25481668e-01, 4.50325683e-01, 4.73980623e-01, 4.96510376e-01, 5.17972953e-01, 5.38421132e-01, 5.57903025e-01, 5.76462575e-01, 5.94139997e-01, 6.10972161e-01, 6.26992929e-01, 6.42233448e-01, 6.56722410e-01, 6.70486279e-01, 6.83549485e-01, 6.95934605e-01, 7.07662510e-01, 7.18752507e-01, 7.29222453e-01, 7.39088867e-01, 7.48367018e-01, 7.57071013e-01, 7.65213868e-01, 7.72807576e-01, 7.79863163e-01, 7.86390741e-01, 7.92399554e-01, 7.97898020e-01, 8.02893763e-01, 8.07393651e-01, 8.11403819e-01, 8.14929694e-01, 8.17976020e-01, 8.20546871e-01, 8.22645671e-01, 8.24275203e-01, 8.25437622e-01, 8.26134461e-01, 8.26366639e-01, 
0.00000000e+00, 5.02099815e-02, 9.77386634e-02, 1.42747521e-01, 1.85392992e-01, 2.25824515e-01, 2.64183109e-01, 3.00600497e-01, 3.35198739e-01, 3.68090247e-01, 3.99378105e-01, 4.29156574e-01, 4.57511706e-01, 4.84522007e-01, 5.10259099e-01, 5.34788365e-01, 5.58169548e-01, 5.80457305e-01, 6.01701707e-01, 6.21948692e-01, 6.41240465e-01, 6.59615859e-01, 6.77110651e-01, 6.93757843e-01, 7.09587915e-01, 7.24629040e-01, 7.38907284e-01, 7.52446776e-01, 7.65269862e-01, 7.77397242e-01, 7.88848092e-01, 7.99640167e-01, 8.09789902e-01, 8.19312493e-01, 8.28221977e-01, 8.36531294e-01, 8.44252353e-01, 8.51396081e-01, 8.57972476e-01, 8.63990644e-01, 8.69458840e-01, 8.74384499e-01, 8.78774268e-01, 8.82634031e-01, 8.85968927e-01, 8.88783377e-01, 8.91081092e-01, 8.92865092e-01, 8.94137716e-01, 8.94900626e-01, 8.95154818e-01, 
0.00000000e+00, 5.30073795e-02, 1.03319924e-01, 1.51086168e-01, 1.96450715e-01, 2.39552639e-01, 2.80524267e-01, 3.19490345e-01, 3.56567588e-01, 3.91864534e-01, 4.25481668e-01, 4.57511706e-01, 4.88040015e-01, 5.17145086e-01, 5.44899047e-01, 5.71368176e-01, 5.96613392e-01, 6.20690730e-01, 6.43651771e-01, 6.65544044e-01, 6.86411389e-01, 7.06294282e-01, 7.25230137e-01, 7.43253561e-01, 7.60396601e-01, 7.76688946e-01, 7.92158123e-01, 8.06829663e-01, 8.20727249e-01, 8.33872857e-01, 8.46286869e-01, 8.57988186e-01, 8.68994321e-01, 8.79321485e-01, 8.88984665e-01, 8.97997692e-01, 9.06373302e-01, 9.14123192e-01, 9.21258068e-01, 9.27787689e-01, 9.33720906e-01, 9.39065694e-01, 9.43829186e-01, 9.48017697e-01, 9.51636749e-01, 9.54691087e-01, 9.57184699e-01, 9.59120832e-01, 9.60501996e-01, 9.61329981e-01, 9.61605857e-01, 
0.00000000e+00, 5.56538511e-02, 1.08601406e-01, 1.58980167e-01, 2.06924508e-01, 2.52564370e-01, 2.96024211e-01, 3.37422246e-01, 3.76869968e-01, 4.14471921e-01, 4.50325683e-01, 4.84522007e-01, 5.17145086e-01, 5.48272884e-01, 5.77977521e-01, 6.06325669e-01, 6.33378958e-01, 6.59194362e-01, 6.83824574e-01, 7.07318350e-01, 7.29720837e-01, 7.51073863e-01, 7.71416210e-01, 7.90783857e-01, 8.09210205e-01, 8.26726272e-01, 8.43360878e-01, 8.59140802e-01, 8.74090935e-01, 8.88234405e-01, 9.01592696e-01, 9.14185756e-01, 9.26032092e-01, 9.37148853e-01, 9.47551908e-01, 9.57255918e-01, 9.66274390e-01, 9.74619743e-01, 9.82303348e-01, 9.89335578e-01, 9.95725844e-01, 1.00148263e+00, 1.00661354e+00, 1.01112528e+00, 1.01502374e+00, 1.01831398e+00, 1.02100025e+00, 1.02308600e+00, 1.02457392e+00, 1.02546591e+00, 1.02576311e+00, 
0.00000000e+00, 5.81609308e-02, 1.13605740e-01, 1.66462422e-01, 2.16856442e-01, 2.64909658e-01, 3.10739418e-01, 3.54457880e-01, 3.96171536e-01, 4.35980944e-01, 4.73980623e-01, 5.10259099e-01, 5.44899047e-01, 5.77977521e-01, 6.09566227e-01, 6.39731832e-01, 6.68536280e-01, 6.96037117e-01, 7.22287795e-01, 7.47337979e-01, 7.71233824e-01, 7.94018241e-01, 8.15731138e-01, 8.36409642e-01, 8.56088309e-01, 8.74799305e-01, 8.92572582e-01, 9.09436025e-01, 9.25415596e-01, 9.40535460e-01, 9.54818097e-01, 9.68284409e-01, 9.80953810e-01, 9.92844309e-01, 1.00397259e+00, 1.01435408e+00, 1.02400301e+00, 1.03293246e+00, 1.04115443e+00, 1.04867986e+00, 1.05551869e+00, 1.06167990e+00, 1.06717149e+00, 1.07200059e+00, 1.07617341e+00, 1.07969530e+00, 1.08257077e+00, 1.08480347e+00, 1.08639623e+00, 1.08735109e+00, 1.08766924e+00, 
0.00000000e+00, 6.05384971e-02, 1.18352362e-01, 1.73561316e-01, 2.26283010e-01, 2.76632115e-01, 3.24719559e-01, 3.70651909e-01, 4.14530927e-01, 4.56453277e-01, 4.96510376e-01, 5.34788365e-01, 5.71368176e-01, 6.06325669e-01, 6.39731832e-01, 6.71653002e-01, 7.02151119e-01, 7.31283982e-01, 7.59105510e-01, 7.85665990e-01, 8.11012325e-01, 8.35188263e-01, 8.58234614e-01, 8.80189451e-01, 9.01088297e-01, 9.20964300e-01, 9.39848385e-01, 9.57769405e-01, 9.74754269e-01, 9.90828063e-01, 1.00601416e+00, 1.02033433e+00, 1.03380879e+00, 1.04645636e+00, 1.05829445e+00, 1.06933920e+00, 1.07960551e+00, 1.08910707e+00, 1.09785646e+00, 1.10586516e+00, 1.11314361e+00, 1.11970120e+00, 1.12554638e+00, 1.13068662e+00, 1.13512845e+00, 1.13887750e+00, 1.14193850e+00, 1.14431531e+00, 1.14601090e+00, 1.14702741e+00, 1.14736611e+00, 
0.00000000e+00, 6.27951015e-02, 1.22858132e-01, 1.80301556e-01, 2.35236120e-01, 2.87770087e-01, 3.38008573e-01, 3.86053002e-01, 4.32000693e-01, 4.75944563e-01, 5.17972953e-01, 5.58169548e-01, 5.96613392e-01, 6.33378958e-01, 6.68536280e-01, 7.02151119e-01, 7.34285148e-01, 7.64996164e-01, 7.94338294e-01, 8.22362205e-01, 8.49115317e-01, 8.74642000e-01, 8.98983764e-01, 9.22179438e-01, 9.44265345e-01, 9.65275451e-01, 9.85241515e-01, 1.00419322e+00, 1.02215831e+00, 1.03916268e+00, 1.05523049e+00, 1.07038428e+00, 1.08464503e+00, 1.09803224e+00, 1.11056403e+00, 1.12225716e+00, 1.13312715e+00, 1.14318825e+00, 1.15245359e+00, 1.16093514e+00, 1.16864378e+00, 1.17558935e+00, 1.18178064e+00, 1.18722548e+00, 1.19193070e+00, 1.19590218e+00, 1.19914487e+00, 1.20166280e+00, 1.20345911e+00, 1.20453600e+00, 1.20489482e+00, 
0.00000000e+00, 6.49382140e-02, 1.27137803e-01, 1.86704823e-01, 2.43743885e-01, 2.98357507e-01, 3.50645540e-01, 4.00704682e-01, 4.48628099e-01, 4.94505137e-01, 5.38421132e-01, 5.80457305e-01, 6.20690730e-01, 6.59194362e-01, 6.96037117e-01, 7.31283982e-01, 7.64996164e-01, 7.97231242e-01, 8.28043338e-01, 8.57483295e-01, 8.85598848e-01, 9.12434796e-01, 9.38033169e-01, 9.62433387e-01, 9.85672411e-01, 1.00778488e+00, 1.02880326e+00, 1.04875794e+00, 1.06767737e+00, 1.08558816e+00, 1.10251517e+00, 1.11848162e+00, 1.13350916e+00, 1.14761792e+00, 1.16082663e+00, 1.17315266e+00, 1.18461205e+00, 1.19521960e+00, 1.20498892e+00, 1.21393243e+00, 1.22206145e+00, 1.22938618e+00, 1.23591579e+00, 1.24165840e+00, 1.24662112e+00, 1.25081007e+00, 1.25423043e+00, 1.25688637e+00, 1.25878115e+00, 1.25991710e+00, 1.26029560e+00, 
0.00000000e+00, 6.69744120e-02, 1.31204387e-01, 1.92790282e-01, 2.51831227e-01, 3.08424574e-01, 3.62665389e-01, 4.14646032e-01, 4.64455798e-01, 5.12180650e-01, 5.57903025e-01, 6.01701707e-01, 6.43651771e-01, 6.83824574e-01, 7.22287795e-01, 7.59105510e-01, 7.94338294e-01, 8.28043338e-01, 8.60274589e-01, 8.91082886e-01, 9.20516106e-01, 9.48619315e-01, 9.75434903e-01, 1.00100273e+00, 1.02536025e+00, 1.04854265e+00, 1.07058296e+00, 1.09151218e+00, 1.11135936e+00, 1.13015172e+00, 1.14791474e+00, 1.16467222e+00, 1.18044640e+00, 1.19525800e+00, 1.20912629e+00, 1.22206916e+00, 1.23410316e+00, 1.24524358e+00, 1.25550445e+00, 1.26489863e+00, 1.27343780e+00, 1.28113255e+00, 1.28799235e+00, 1.29402562e+00, 1.29923972e+00, 1.30364100e+00, 1.30723482e+00, 1.31002552e+00, 1.31201647e+00, 1.31321008e+00, 1.31360779e+00, 
0.00000000e+00, 6.89095269e-02, 1.35069432e-01, 1.98574975e-01, 2.59520371e-01, 3.17998302e-01, 3.74099484e-01, 4.27912285e-01, 4.79522404e-01, 5.29012615e-01, 5.76462575e-01, 6.21948692e-01, 6.65544044e-01, 7.07318350e-01, 7.47337979e-01, 7.85665990e-01, 8.22362205e-01, 8.57483295e-01, 8.91082886e-01, 9.23211667e-01, 9.53917517e-01, 9.83245618e-01, 1.01123859e+00, 1.03793658e+00, 1.06337743e+00, 1.08759675e+00, 1.11062803e+00, 1.13250274e+00, 1.15325047e+00, 1.17289894e+00, 1.19147415e+00, 1.20900045e+00, 1.22550057e+00, 1.24099575e+00, 1.25550574e+00, 1.26904890e+00, 1.28164225e+00, 1.29330149e+00, 1.30404107e+00, 1.31387422e+00, 1.32281299e+00, 1.33086828e+00, 1.33804986e+00, 1.34436641e+00, 1.34982555e+00, 1.35443382e+00, 1.35819675e+00, 1.36111883e+00, 1.36320355e+00, 1.36445339e+00, 1.36486984e+00, 
0.00000000e+00, 7.07487595e-02, 1.38743246e-01, 2.04074145e-01, 2.66831234e-01, 3.27102970e-01, 3.84976098e-01, 4.40535317e-01, 4.93862982e-01, 5.45038872e-01, 5.94139997e-01, 6.41240465e-01, 6.86411389e-01, 7.29720837e-01, 7.71233824e-01, 8.11012325e-01, 8.49115317e-01, 8.85598848e-01, 9.20516106e-01, 9.53917517e-01, 9.85850831e-01, 1.01636123e+00, 1.04549143e+00, 1.07328179e+00, 1.09977039e+00, 1.12499314e+00, 1.14898392e+00, 1.17177458e+00, 1.19339512e+00, 1.21387372e+00, 1.23323681e+00, 1.25150918e+00, 1.26871404e+00, 1.28487303e+00, 1.30000637e+00, 1.31413282e+00, 1.32726982e+00, 1.33943344e+00, 1.35063850e+00, 1.36089859e+00, 1.37022606e+00, 1.37863211e+00, 1.38612680e+00, 1.39271904e+00, 1.39841666e+00, 1.40322640e+00, 1.40715395e+00, 1.41020393e+00, 1.41237993e+00, 1.41368451e+00, 1.41411920e+00, 
0.00000000e+00, 7.24967724e-02, 1.42235083e-01, 2.09301486e-01, 2.73781749e-01, 3.35760487e-01, 3.95320816e-01, 4.52544055e-01, 5.07509458e-01, 5.60293993e-01, 6.10972161e-01, 6.59615859e-01, 7.06294282e-01, 7.51073863e-01, 7.94018241e-01, 8.35188263e-01, 8.74642000e-01, 9.12434796e-01, 9.48619315e-01, 9.83245618e-01, 1.01636123e+00, 1.04801123e+00, 1.07823834e+00, 1.10708298e+00, 1.13458341e+00, 1.16077577e+00, 1.18569418e+00, 1.20937082e+00, 1.23183602e+00, 1.25311831e+00, 1.27324450e+00, 1.29223977e+00, 1.31012769e+00, 1.32693032e+00, 1.34266823e+00, 1.35736058e+00, 1.37102513e+00, 1.38367832e+00, 1.39533530e+00, 1.40600995e+00, 1.41571494e+00, 1.42446172e+00, 1.43226059e+00, 1.43912069e+00, 1.44505005e+00, 1.45005559e+00, 1.45414313e+00, 1.45731742e+00, 1.45958215e+00, 1.46093993e+00, 1.46139236e+00, 
0.00000000e+00, 7.41577653e-02, 1.45553279e-01, 2.14269358e-01, 2.80388126e-01, 3.43990696e-01, 4.05156862e-01, 4.63964830e-01, 5.20490974e-01, 5.74809631e-01, 6.26992929e-01, 6.77110651e-01, 7.25230137e-01, 7.71416210e-01, 8.15731138e-01, 8.58234614e-01, 8.98983764e-01, 9.38033169e-01, 9.75434903e-01, 1.01123859e+00, 1.04549143e+00, 1.07823834e+00, 1.10952192e+00, 1.13938263e+00, 1.16785876e+00, 1.19498661e+00, 1.22080049e+00, 1.24533280e+00, 1.26861413e+00, 1.29067330e+00, 1.31153744e+00, 1.33123203e+00, 1.34978098e+00, 1.36720668e+00, 1.38353002e+00, 1.39877049e+00, 1.41294616e+00, 1.42607379e+00, 1.43816881e+00, 1.44924537e+00, 1.45931641e+00, 1.46839363e+00, 1.47648753e+00, 1.48360748e+00, 1.48976167e+00, 1.49495717e+00, 1.49919996e+00, 1.50249488e+00, 1.50484571e+00, 1.50625513e+00, 1.50672476e+00, 
0.00000000e+00, 7.57355356e-02, 1.48705381e-01, 2.18988955e-01, 2.86665066e-01, 3.51811627e-01, 4.14505385e-01, 4.74821674e-01, 5.32834194e-01, 5.88614822e-01, 6.42233448e-01, 6.93757843e-01, 7.43253561e-01, 7.90783857e-01, 8.36409642e-01, 8.80189451e-01, 9.22179438e-01, 9.62433387e-01, 1.00100273e+00, 1.03793658e+00, 1.07328179e+00, 1.10708298e+00, 1.13938263e+00, 1.17022108e+00, 1.19963665e+00, 1.22766570e+00, 1.25434264e+00, 1.27970004e+00, 1.30376869e+00, 1.32657763e+00, 1.34815424e+00, 1.36852426e+00, 1.38771187e+00, 1.40573974e+00, 1.42262905e+00, 1.43839955e+00, 1.45306961e+00, 1.46665624e+00, 1.47917514e+00, 1.49064071e+00, 1.50106610e+00, 1.51046324e+00, 1.51884284e+00, 1.52621442e+00, 1.53258637e+00, 1.53796588e+00, 1.54235905e+00, 1.54577084e+00, 1.54820508e+00, 1.54966453e+00, 1.55015084e+00, 
0.00000000e+00, 7.72335290e-02, 1.51698238e-01, 2.23470449e-01, 2.92625944e-01, 3.59239709e-01, 4.23385688e-01, 4.85136565e-01, 5.44563558e-01, 6.01736245e-01, 6.56722410e-01, 7.09587915e-01, 7.60396601e-01, 8.09210205e-01, 8.56088309e-01, 9.01088297e-01, 9.44265345e-01, 9.85672411e-01, 1.02536025e+00, 1.06337743e+00, 1.09977039e+00, 1.13458341e+00, 1.16785876e+00, 1.19963665e+00, 1.22995534e+00, 1.25885117e+00, 1.28635861e+00, 1.31251034e+00, 1.33733727e+00, 1.36086862e+00, 1.38313195e+00, 1.40415322e+00, 1.42395684e+00, 1.44256570e+00, 1.46000123e+00, 1.47628341e+00, 1.49143085e+00, 1.50546080e+00, 1.51838917e+00, 1.53023060e+00, 1.54099843e+00, 1.55070478e+00, 1.55936054e+00, 1.56697541e+00, 1.57355789e+00, 1.57911533e+00, 1.58365393e+00, 1.58717873e+00, 1.58969365e+00, 1.59120149e+00, 1.59170392e+00, 
0.00000000e+00, 7.86548816e-02, 1.54538087e-01, 2.27723110e-01, 2.98282965e-01, 3.66289951e-01, 4.31815435e-01, 4.94929651e-01, 5.55701514e-01, 6.14198455e-01, 6.70486279e-01, 7.24629040e-01, 7.76688946e-01, 8.26726272e-01, 8.74799305e-01, 9.20964300e-01, 9.65275451e-01, 1.00778488e+00, 1.04854265e+00, 1.08759675e+00, 1.12499314e+00, 1.16077577e+00, 1.19498661e+00, 1.22766570e+00, 1.25885117e+00, 1.28857931e+00, 1.31688459e+00, 1.34379973e+00, 1.36935574e+00, 1.39358194e+00, 1.41650605e+00, 1.43815418e+00, 1.45855092e+00, 1.47771935e+00, 1.49568110e+00, 1.51245637e+00, 1.52806395e+00, 1.54252130e+00, 1.55584453e+00, 1.56804846e+00, 1.57914661e+00, 1.58915129e+00, 1.59807352e+00, 1.60592316e+00, 1.61270884e+00, 1.61843803e+00, 1.62311700e+00, 1.62675090e+00, 1.62934370e+00, 1.63089825e+00, 1.63141625e+00, 
0.00000000e+00, 8.00024546e-02, 1.57230620e-01, 2.31755405e-01, 3.03647284e-01, 3.72976089e-01, 4.39810813e-01, 5.04219426e-01, 5.66268704e-01, 6.26024075e-01, 6.83549485e-01, 7.38907284e-01, 7.92158123e-01, 8.43360878e-01, 8.92572582e-01, 9.39848385e-01, 9.85241515e-01, 1.02880326e+00, 1.07058296e+00, 1.11062803e+00, 1.14898392e+00, 1.18569418e+00, 1.22080049e+00, 1.25434264e+00, 1.28635861e+00, 1.31688459e+00, 1.34595500e+00, 1.37360257e+00, 1.39985833e+00, 1.42475169e+00, 1.44831045e+00, 1.47056085e+00, 1.49152764e+00, 1.51123403e+00, 1.52970181e+00, 1.54695136e+00, 1.56300165e+00, 1.57787029e+00, 1.59157357e+00, 1.60412646e+00, 1.61554267e+00, 1.62583461e+00, 1.63501349e+00, 1.64308926e+00, 1.65007069e+00, 1.65596532e+00, 1.66077955e+00, 1.66451856e+00, 1.66718641e+00, 1.66878596e+00, 1.66931896e+00, 
0.00000000e+00, 8.12788646e-02, 1.59781047e-01, 2.35575085e-01, 3.08729121e-01, 3.79310721e-01, 4.47386688e-01, 5.13022897e-01, 5.76284139e-01, 6.37233972e-01, 6.95934605e-01, 7.52446776e-01, 8.06829663e-01, 8.59140802e-01, 9.09436025e-01, 9.57769405e-01, 1.00419322e+00, 1.04875794e+00, 1.09151218e+00, 1.13250274e+00, 1.17177458e+00, 1.20937082e+00, 1.24533280e+00, 1.27970004e+00, 1.31251034e+00, 1.34379973e+00, 1.37360257e+00, 1.40195153e+00, 1.42887764e+00, 1.45441035e+00, 1.47857753e+00, 1.50140550e+00, 1.52291909e+00, 1.54314166e+00, 1.56209512e+00, 1.57979998e+00, 1.59627535e+00, 1.61153900e+00, 1.62560736e+00, 1.63849553e+00, 1.65021735e+00, 1.66078539e+00, 1.67021095e+00, 1.67850410e+00, 1.68567371e+00, 1.69172742e+00, 1.69667169e+00, 1.70051178e+00, 1.70325179e+00, 1.70489463e+00, 1.70544205e+00, 
0.00000000e+00, 8.24865081e-02, 1.62194139e-01, 2.39189253e-01, 3.13537852e-01, 3.85305414e-01, 4.54556723e-01, 5.21355716e-01, 5.85765339e-01, 6.47847411e-01, 7.07662510e-01, 7.65269862e-01, 8.20727249e-01, 8.74090935e-01, 9.25415596e-01, 9.74754269e-01, 1.02215831e+00, 1.06767737e+00, 1.11135936e+00, 1.15325047e+00, 1.19339512e+00, 1.23183602e+00, 1.26861413e+00, 1.30376869e+00, 1.33733727e+00, 1.36935574e+00, 1.39985833e+00, 1.42887764e+00, 1.45644468e+00, 1.48258888e+00, 1.50733815e+00, 1.53071885e+00, 1.55275590e+00, 1.57347274e+00, 1.59289138e+00, 1.61103244e+00, 1.62791515e+00, 1.64355738e+00, 1.65797569e+00, 1.67118532e+00, 1.68320021e+00, 1.69403302e+00, 1.70369518e+00, 1.71219686e+00, 1.71954701e+00, 1.72575334e+00, 1.73082239e+00, 1.73475948e+00, 1.73756874e+00, 1.73925311e+00, 1.73981437e+00, 
0.00000000e+00, 8.36275831e-02, 1.64474274e-01, 2.42604431e-01, 3.18082090e-01, 3.90970804e-01, 4.61333493e-01, 5.29232303e-01, 5.94728466e-01, 6.57882183e-01, 7.18752507e-01, 7.77397242e-01, 8.33872857e-01, 8.88234405e-01, 9.40535460e-01, 9.90828063e-01, 1.03916268e+00, 1.08558816e+00, 1.13015172e+00, 1.17289894e+00, 1.21387372e+00, 1.25311831e+00, 1.29067330e+00, 1.32657763e+00, 1.36086862e+00, 1.39358194e+00, 1.42475169e+00, 1.45441035e+00, 1.48258888e+00, 1.50931669e+00, 1.53462166e+00, 1.55853021e+00, 1.58106728e+00, 1.60225637e+00, 1.62211959e+00, 1.64067761e+00, 1.65794977e+00, 1.67395405e+00, 1.68870709e+00, 1.70222423e+00, 1.71451950e+00, 1.72560569e+00, 1.73549428e+00, 1.74419555e+00, 1.75171850e+00, 1.75807094e+00, 1.76325945e+00, 1.76728939e+00, 1.77016495e+00, 1.77188909e+00, 1.77246361e+00, 
0.00000000e+00, 8.47041082e-02, 1.66625472e-01, 2.45826612e-01, 3.22369752e-01, 3.96316673e-01, 4.67728576e-01, 5.36665947e-01, 6.03188432e-01, 6.67354724e-01, 7.29222453e-01, 7.88848092e-01, 8.46286869e-01, 9.01592696e-01, 9.54818097e-01, 1.00601416e+00, 1.05523049e+00, 1.10251517e+00, 1.14791474e+00, 1.19147415e+00, 1.23323681e+00, 1.27324450e+00, 1.31153744e+00, 1.34815424e+00, 1.38313195e+00, 1.41650605e+00, 1.44831045e+00, 1.47857753e+00, 1.50733815e+00, 1.53462166e+00, 1.56045594e+00, 1.58486739e+00, 1.60788098e+00, 1.62952024e+00, 1.64980733e+00, 1.66876300e+00, 1.68640665e+00, 1.70275632e+00, 1.71782875e+00, 1.73163936e+00, 1.74420227e+00, 1.75553032e+00, 1.76563509e+00, 1.77452692e+00, 1.78221489e+00, 1.78870686e+00, 1.79400945e+00, 1.79812808e+00, 1.80106696e+00, 1.80282909e+00, 1.80341626e+00, 
0.00000000e+00, 8.57179375e-02, 1.68651428e-01, 2.48861304e-01, 3.26408120e-01, 4.01352027e-01, 4.73752636e-01, 5.43668902e-01, 6.11158999e-01, 6.76280219e-01, 7.39088867e-01, 7.99640167e-01, 8.57988186e-01, 9.14185756e-01, 9.68284409e-01, 1.02033433e+00, 1.07038428e+00, 1.11848162e+00, 1.16467222e+00, 1.20900045e+00, 1.25150918e+00, 1.29223977e+00, 1.33123203e+00, 1.36852426e+00, 1.40415322e+00, 1.43815418e+00, 1.47056085e+00, 1.50140550e+00, 1.53071885e+00, 1.55853021e+00, 1.58486739e+00, 1.60975678e+00, 1.63322335e+00, 1.65529065e+00, 1.67598086e+00, 1.69531478e+00, 1.71331185e+00, 1.72999020e+00, 1.74536661e+00, 1.75945657e+00, 1.77227426e+00, 1.78383260e+00, 1.79414323e+00, 1.80321654e+00, 1.81106167e+00, 1.81768653e+00, 1.82309779e+00, 1.82730090e+00, 1.83030010e+00, 1.83209842e+00, 1.83269765e+00, 
0.00000000e+00, 8.66707749e-02, 1.70555539e-01, 2.51713571e-01, 3.30203893e-01, 4.06085151e-01, 4.79415496e-01, 5.50252462e-01, 6.18652864e-01, 6.84672692e-01, 7.48367018e-01, 8.09789902e-01, 8.68994321e-01, 9.26032092e-01, 9.80953810e-01, 1.03380879e+00, 1.08464503e+00, 1.13350916e+00, 1.18044640e+00, 1.22550057e+00, 1.26871404e+00, 1.31012769e+00, 1.34978098e+00, 1.38771187e+00, 1.42395684e+00, 1.45855092e+00, 1.49152764e+00, 1.52291909e+00, 1.55275590e+00, 1.58106728e+00, 1.60788098e+00, 1.63322335e+00, 1.65711933e+00, 1.67959250e+00, 1.70066503e+00, 1.72035775e+00, 1.73869015e+00, 1.75568039e+00, 1.77134530e+00, 1.78570041e+00, 1.79875998e+00, 1.81053696e+00, 1.82104306e+00, 1.83028871e+00, 1.83828310e+00, 1.84503418e+00, 1.85054866e+00, 1.85483202e+00, 1.85788852e+00, 1.85972121e+00, 1.86033190e+00, 
0.00000000e+00, 8.75641861e-02, 1.72340926e-01, 2.54388069e-01, 3.33763230e-01, 4.10523673e-01, 4.84726197e-01, 5.56427032e-01, 6.25681733e-01, 6.92545085e-01, 7.57071013e-01, 8.19312493e-01, 8.79321485e-01, 9.37148853e-01, 9.92844309e-01, 1.04645636e+00, 1.09803224e+00, 1.14761792e+00, 1.19525800e+00, 1.24099575e+00, 1.28487303e+00, 1.32693032e+00, 1.36720668e+00, 1.40573974e+00, 1.44256570e+00, 1.47771935e+00, 1.51123403e+00, 1.54314166e+00, 1.57347274e+00, 1.60225637e+00, 1.62952024e+00, 1.65529065e+00, 1.67959250e+00, 1.70244934e+00, 1.72388337e+00, 1.74391541e+00, 1.76256499e+00, 1.77985027e+00, 1.79578814e+00, 1.81039418e+00, 1.82368265e+00, 1.83566659e+00, 1.84635772e+00, 1.85576652e+00, 1.86390222e+00, 1.87077281e+00, 1.87638502e+00, 1.88074437e+00, 1.88385514e+00, 1.88572037e+00, 1.88634192e+00, 
0.00000000e+00, 8.83996086e-02, 1.74010453e-01, 2.56889075e-01, 3.37091794e-01, 4.14674603e-01, 4.89693061e-01, 5.62202192e-01, 6.32256392e-01, 6.99909330e-01, 7.65213868e-01, 8.28221977e-01, 8.88984665e-01, 9.47551908e-01, 1.00397259e+00, 1.05829445e+00, 1.11056403e+00, 1.16082663e+00, 1.20912629e+00, 1.25550574e+00, 1.30000637e+00, 1.34266823e+00, 1.38353002e+00, 1.42262905e+00, 1.46000123e+00, 1.49568110e+00, 1.52970181e+00, 1.56209512e+00, 1.59289138e+00, 1.62211959e+00, 1.64980733e+00, 1.67598086e+00, 1.70066503e+00, 1.72388337e+00, 1.74565805e+00, 1.76600991e+00, 1.78495848e+00, 1.80252194e+00, 1.81871720e+00, 1.83355986e+00, 1.84706425e+00, 1.85924339e+00, 1.87010908e+00, 1.87967181e+00, 1.88794084e+00, 1.89492419e+00, 1.90062863e+00, 1.90505969e+00, 1.90822166e+00, 1.91011762e+00, 1.91074940e+00, 
0.00000000e+00, 8.91783613e-02, 1.75566752e-01, 2.59220514e-01, 3.40194780e-01, 4.18544379e-01, 4.94323729e-01, 5.67586749e-01, 6.38386762e-01, 7.06776411e-01, 7.72807576e-01, 8.36531294e-01, 8.97997692e-01, 9.57255918e-01, 1.01435408e+00, 1.06933920e+00, 1.12225716e+00, 1.17315266e+00, 1.22206916e+00, 1.26904890e+00, 1.31413282e+00, 1.35736058e+00, 1.39877049e+00, 1.43839955e+00, 1.47628341e+00, 1.51245637e+00, 1.54695136e+00, 1.57979998e+00, 1.61103244e+00, 1.64067761e+00, 1.66876300e+00, 1.69531478e+00, 1.72035775e+00, 1.74391541e+00, 1.76600991e+00, 1.78666208e+00, 1.80589143e+00, 1.82371617e+00, 1.84015322e+00, 1.85521820e+00, 1.86892545e+00, 1.88128804e+00, 1.89231776e+00, 1.90202516e+00, 1.91041952e+00, 1.91750887e+00, 1.92330000e+00, 1.92779847e+00, 1.93100858e+00, 1.93293342e+00, 1.93357482e+00, 
0.00000000e+00, 8.99016517e-02, 1.77012230e-01, 2.61385980e-01, 3.43076951e-01, 4.22138904e-01, 4.98625213e-01, 5.72588783e-01, 6.44081953e-01, 7.13156422e-01, 7.79863163e-01, 8.44252353e-01, 9.06373302e-01, 9.66274390e-01, 1.02400301e+00, 1.07960551e+00, 1.13312715e+00, 1.18461205e+00, 1.23410316e+00, 1.28164225e+00, 1.32726982e+00, 1.37102513e+00, 1.41294616e+00, 1.45306961e+00, 1.49143085e+00, 1.52806395e+00, 1.56300165e+00, 1.59627535e+00, 1.62791515e+00, 1.65794977e+00, 1.68640665e+00, 1.71331185e+00, 1.73869015e+00, 1.76256499e+00, 1.78495848e+00, 1.80589143e+00, 1.82538336e+00, 1.84345247e+00, 1.86011569e+00, 1.87538864e+00, 1.88928569e+00, 1.90181992e+00, 1.91300315e+00, 1.92284594e+00, 1.93135758e+00, 1.93854614e+00, 1.94441842e+00, 1.94897998e+00, 1.95223516e+00, 1.95418703e+00, 1.95483744e+00, 
0.00000000e+00, 9.05705836e-02, 1.78349089e-01, 2.63388762e-01, 3.45742662e-01, 4.25463577e-01, 5.02603929e-01, 5.77215693e-01, 6.49350310e-01, 7.19058612e-01, 7.86390741e-01, 8.51396081e-01, 9.14123192e-01, 9.74619743e-01, 1.03293246e+00, 1.08910707e+00, 1.14318825e+00, 1.19521960e+00, 1.24524358e+00, 1.29330149e+00, 1.33943344e+00, 1.38367832e+00, 1.42607379e+00, 1.46665624e+00, 1.50546080e+00, 1.54252130e+00, 1.57787029e+00, 1.61153900e+00, 1.64355738e+00, 1.67395405e+00, 1.70275632e+00, 1.72999020e+00, 1.75568039e+00, 1.77985027e+00, 1.80252194e+00, 1.82371617e+00, 1.84345247e+00, 1.86174903e+00, 1.87862279e+00, 1.89408936e+00, 1.90816313e+00, 1.92085718e+00, 1.93218336e+00, 1.94215223e+00, 1.95077311e+00, 1.95805407e+00, 1.96400193e+00, 1.96862227e+00, 1.97191941e+00, 1.97389646e+00, 1.97455528e+00, 
0.00000000e+00, 9.11861626e-02, 1.79579335e-01, 2.65231854e-01, 3.48195883e-01, 4.28523322e-01, 5.06265729e-01, 5.81474232e-01, 6.54199453e-01, 7.24491433e-01, 7.92399554e-01, 8.57972476e-01, 9.21258068e-01, 9.82303348e-01, 1.04115443e+00, 1.09785646e+00, 1.15245359e+00, 1.20498892e+00, 1.25550445e+00, 1.30404107e+00, 1.35063850e+00, 1.39533530e+00, 1.43816881e+00, 1.47917514e+00, 1.51838917e+00, 1.55584453e+00, 1.59157357e+00, 1.62560736e+00, 1.65797569e+00, 1.68870709e+00, 1.71782875e+00, 1.74536661e+00, 1.77134530e+00, 1.79578814e+00, 1.81871720e+00, 1.84015322e+00, 1.86011569e+00, 1.87862279e+00, 1.89569143e+00, 1.91133726e+00, 1.92557465e+00, 1.93841670e+00, 1.94987524e+00, 1.95996088e+00, 1.96868293e+00, 1.97604947e+00, 1.98206734e+00, 1.98674212e+00, 1.99007815e+00, 1.99207852e+00, 1.99274511e+00, 
0.00000000e+00, 9.17493020e-02, 1.80704789e-01, 2.66917978e-01, 3.50440219e-01, 4.31322614e-01, 5.09615933e-01, 5.85370539e-01, 6.58636313e-01, 7.29462576e-01, 7.97898020e-01, 8.63990644e-01, 9.27787689e-01, 9.89335578e-01, 1.04867986e+00, 1.10586516e+00, 1.16093514e+00, 1.21393243e+00, 1.26489863e+00, 1.31387422e+00, 1.36089859e+00, 1.40600995e+00, 1.44924537e+00, 1.49064071e+00, 1.53023060e+00, 1.56804846e+00, 1.60412646e+00, 1.63849553e+00, 1.67118532e+00, 1.70222423e+00, 1.73163936e+00, 1.75945657e+00, 1.78570041e+00, 1.81039418e+00, 1.83355986e+00, 1.85521820e+00, 1.87538864e+00, 1.89408936e+00, 1.91133726e+00, 1.92714798e+00, 1.94153588e+00, 1.95451408e+00, 1.96609442e+00, 1.97628749e+00, 1.98510264e+00, 1.99254793e+00, 1.99863022e+00, 2.00335510e+00, 2.00672691e+00, 2.00874875e+00, 2.00942249e+00, 
0.00000000e+00, 9.22608270e-02, 1.81727098e-01, 2.68449594e-01, 3.52478933e-01, 4.33865497e-01, 5.12659352e-01, 5.88910172e-01, 6.62667165e-01, 7.33979006e-01, 8.02893763e-01, 8.69458840e-01, 9.33720906e-01, 9.95725844e-01, 1.05551869e+00, 1.11314361e+00, 1.16864378e+00, 1.22206145e+00, 1.27343780e+00, 1.32281299e+00, 1.37022606e+00, 1.41571494e+00, 1.45931641e+00, 1.50106610e+00, 1.54099843e+00, 1.57914661e+00, 1.61554267e+00, 1.65021735e+00, 1.68320021e+00, 1.71451950e+00, 1.74420227e+00, 1.77227426e+00, 1.79875998e+00, 1.82368265e+00, 1.84706425e+00, 1.86892545e+00, 1.88928569e+00, 1.90816313e+00, 1.92557465e+00, 1.94153588e+00, 1.95606120e+00, 1.96916370e+00, 1.98085524e+00, 1.99114642e+00, 2.00004656e+00, 2.00756377e+00, 2.01370490e+00, 2.01847552e+00, 2.02188001e+00, 2.02392145e+00, 2.02460173e+00, 
0.00000000e+00, 9.27214788e-02, 1.82647741e-01, 2.69828910e-01, 3.54314953e-01, 4.36155609e-01, 5.15400314e-01, 5.92098125e-01, 6.66297653e-01, 7.38046991e-01, 8.07393651e-01, 8.74384499e-01, 9.39065694e-01, 1.00148263e+00, 1.06167990e+00, 1.11970120e+00, 1.17558935e+00, 1.22938618e+00, 1.28113255e+00, 1.33086828e+00, 1.37863211e+00, 1.42446172e+00, 1.46839363e+00, 1.51046324e+00, 1.55070478e+00, 1.58915129e+00, 1.62583461e+00, 1.66078539e+00, 1.69403302e+00, 1.72560569e+00, 1.75553032e+00, 1.78383260e+00, 1.81053696e+00, 1.83566659e+00, 1.85924339e+00, 1.88128804e+00, 1.90181992e+00, 1.92085718e+00, 1.93841670e+00, 1.95451408e+00, 1.96916370e+00, 1.98237866e+00, 1.99417081e+00, 2.00455074e+00, 2.01352780e+00, 2.02111008e+00, 2.02730444e+00, 2.03211647e+00, 2.03555052e+00, 2.03760971e+00, 2.03829590e+00, 
0.00000000e+00, 9.31319186e-02, 1.83468038e-01, 2.71057898e-01, 3.55950893e-01, 4.38196195e-01, 5.17842679e-01, 5.94938860e-01, 6.69532818e-01, 7.41672132e-01, 8.11403819e-01, 8.78774268e-01, 9.43829186e-01, 1.00661354e+00, 1.06717149e+00, 1.12554638e+00, 1.18178064e+00, 1.23591579e+00, 1.28799235e+00, 1.33804986e+00, 1.38612680e+00, 1.43226059e+00, 1.47648753e+00, 1.51884284e+00, 1.55936054e+00, 1.59807352e+00, 1.63501349e+00, 1.67021095e+00, 1.70369518e+00, 1.73549428e+00, 1.76563509e+00, 1.79414323e+00, 1.82104306e+00, 1.84635772e+00, 1.87010908e+00, 1.89231776e+00, 1.91300315e+00, 1.93218336e+00, 1.94987524e+00, 1.96609442e+00, 1.98085524e+00, 1.99417081e+00, 2.00605297e+00, 2.01651231e+00, 2.02555819e+00, 2.03319870e+00, 2.03944069e+00, 2.04428977e+00, 2.04775028e+00, 2.04982534e+00, 2.05051682e+00, 
0.00000000e+00, 9.34927302e-02, 1.84189152e-01, 2.72138299e-01, 3.57389064e-01, 4.39990121e-01, 5.19989860e-01, 5.97436320e-01, 6.72377117e-01, 7.44859381e-01, 8.14929694e-01, 8.82634031e-01, 9.48017697e-01, 1.01112528e+00, 1.07200059e+00, 1.13068662e+00, 1.18722548e+00, 1.24165840e+00, 1.29402562e+00, 1.34436641e+00, 1.39271904e+00, 1.43912069e+00, 1.48360748e+00, 1.52621442e+00, 1.56697541e+00, 1.60592316e+00, 1.64308926e+00, 1.67850410e+00, 1.71219686e+00, 1.74419555e+00, 1.77452692e+00, 1.80321654e+00, 1.83028871e+00, 1.85576652e+00, 1.87967181e+00, 1.90202516e+00, 1.92284594e+00, 1.94215223e+00, 1.95996088e+00, 1.97628749e+00, 1.99114642e+00, 2.00455074e+00, 2.01651231e+00, 2.02704172e+00, 2.03614832e+00, 2.04384021e+00, 2.05012424e+00, 2.05500600e+00, 2.05848986e+00, 2.06057893e+00, 2.06127509e+00, 
0.00000000e+00, 9.38044231e-02, 1.84812101e-01, 2.73071633e-01, 3.58631479e-01, 4.41539889e-01, 5.21844836e-01, 5.99593948e-01, 6.74834442e-01, 7.47613063e-01, 8.17976020e-01, 8.85968927e-01, 9.51636749e-01, 1.01502374e+00, 1.07617341e+00, 1.13512845e+00, 1.19193070e+00, 1.24662112e+00, 1.29923972e+00, 1.34982555e+00, 1.39841666e+00, 1.44505005e+00, 1.48976167e+00, 1.53258637e+00, 1.57355789e+00, 1.61270884e+00, 1.65007069e+00, 1.68567371e+00, 1.71954701e+00, 1.75171850e+00, 1.78221489e+00, 1.81106167e+00, 1.83828310e+00, 1.86390222e+00, 1.88794084e+00, 1.91041952e+00, 1.93135758e+00, 1.95077311e+00, 1.96868293e+00, 1.98510264e+00, 2.00004656e+00, 2.01352780e+00, 2.02555819e+00, 2.03614832e+00, 2.04530755e+00, 2.05304396e+00, 2.05936442e+00, 2.06427451e+00, 2.06777861e+00, 2.06987983e+00, 2.07058002e+00, 
0.00000000e+00, 9.40674343e-02, 1.85337757e-01, 2.73859202e-01, 3.59679868e-01, 4.42847648e-01, 5.23410163e-01, 6.01414698e-01, 6.76908135e-01, 7.49936895e-01, 8.20546871e-01, 8.88783377e-01, 9.54691087e-01, 1.01831398e+00, 1.07969530e+00, 1.13887750e+00, 1.19590218e+00, 1.25081007e+00, 1.30364100e+00, 1.35443382e+00, 1.40322640e+00, 1.45005559e+00, 1.49495717e+00, 1.53796588e+00, 1.57911533e+00, 1.61843803e+00, 1.65596532e+00, 1.69172742e+00, 1.72575334e+00, 1.75807094e+00, 1.78870686e+00, 1.81768653e+00, 1.84503418e+00, 1.87077281e+00, 1.89492419e+00, 1.91750887e+00, 1.93854614e+00, 1.95805407e+00, 1.97604947e+00, 1.99254793e+00, 2.00756377e+00, 2.02111008e+00, 2.03319870e+00, 2.04384021e+00, 2.05304396e+00, 2.06081805e+00, 2.06716933e+00, 2.07210340e+00, 2.07562463e+00, 2.07773611e+00, 2.07843974e+00, 
0.00000000e+00, 9.42821305e-02, 1.85766851e-01, 2.74502101e-01, 3.60535683e-01, 4.43915200e-01, 5.24687988e-01, 6.02901053e-01, 6.78601004e-01, 7.51833997e-01, 8.22645671e-01, 8.91081092e-01, 9.57184699e-01, 1.02100025e+00, 1.08257077e+00, 1.14193850e+00, 1.19914487e+00, 1.25423043e+00, 1.30723482e+00, 1.35819675e+00, 1.40715395e+00, 1.45414313e+00, 1.49919996e+00, 1.54235905e+00, 1.58365393e+00, 1.62311700e+00, 1.66077955e+00, 1.69667169e+00, 1.73082239e+00, 1.76325945e+00, 1.79400945e+00, 1.82309779e+00, 1.85054866e+00, 1.87638502e+00, 1.90062863e+00, 1.92330000e+00, 1.94441842e+00, 1.96400193e+00, 1.98206734e+00, 1.99863022e+00, 2.01370490e+00, 2.02730444e+00, 2.03944069e+00, 2.05012424e+00, 2.05936442e+00, 2.06716933e+00, 2.07354583e+00, 2.07849952e+00, 2.08203475e+00, 2.08415464e+00, 2.08486107e+00, 
0.00000000e+00, 9.44488097e-02, 1.86099979e-01, 2.75001218e-01, 3.61200102e-01, 4.44744010e-01, 5.25680056e-01, 6.04055029e-01, 6.79915330e-01, 7.53306907e-01, 8.24275203e-01, 8.92865092e-01, 9.59120832e-01, 1.02308600e+00, 1.08480347e+00, 1.14431531e+00, 1.20166280e+00, 1.25688637e+00, 1.31002552e+00, 1.36111883e+00, 1.41020393e+00, 1.45731742e+00, 1.50249488e+00, 1.54577084e+00, 1.58717873e+00, 1.62675090e+00, 1.66451856e+00, 1.70051178e+00, 1.73475948e+00, 1.76728939e+00, 1.79812808e+00, 1.82730090e+00, 1.85483202e+00, 1.88074437e+00, 1.90505969e+00, 1.92779847e+00, 1.94897998e+00, 1.96862227e+00, 1.98674212e+00, 2.00335510e+00, 2.01847552e+00, 2.03211647e+00, 2.04428977e+00, 2.05500600e+00, 2.06427451e+00, 2.07210340e+00, 2.07849952e+00, 2.08346846e+00, 2.08701459e+00, 2.08914102e+00, 2.08984963e+00, 
0.00000000e+00, 9.45677026e-02, 1.86337601e-01, 2.75357242e-01, 3.61674039e-01, 4.45335211e-01, 5.26387716e-01, 6.04878189e-01, 6.80852878e-01, 7.54357589e-01, 8.25437622e-01, 8.94137716e-01, 9.60501996e-01, 1.02457392e+00, 1.08639623e+00, 1.14601090e+00, 1.20345911e+00, 1.25878115e+00, 1.31201647e+00, 1.36320355e+00, 1.41237993e+00, 1.45958215e+00, 1.50484571e+00, 1.54820508e+00, 1.58969365e+00, 1.62934370e+00, 1.66718641e+00, 1.70325179e+00, 1.73756874e+00, 1.77016495e+00, 1.80106696e+00, 1.83030010e+00, 1.85788852e+00, 1.88385514e+00, 1.90822166e+00, 1.93100858e+00, 1.95223516e+00, 1.97191941e+00, 1.99007815e+00, 2.00672691e+00, 2.02188001e+00, 2.03555052e+00, 2.04775028e+00, 2.05848986e+00, 2.06777861e+00, 2.07562463e+00, 2.08203475e+00, 2.08701459e+00, 2.09056850e+00, 2.09269961e+00, 2.09340977e+00, 
0.00000000e+00, 9.46389728e-02, 1.86480044e-01, 2.75570661e-01, 3.61958142e-01, 4.45689610e-01, 5.26811929e-01, 6.05371641e-01, 6.81414906e-01, 7.54987441e-01, 8.26134461e-01, 8.94900626e-01, 9.61329981e-01, 1.02546591e+00, 1.08735109e+00, 1.14702741e+00, 1.20453600e+00, 1.25991710e+00, 1.31321008e+00, 1.36445339e+00, 1.41368451e+00, 1.46093993e+00, 1.50625513e+00, 1.54966453e+00, 1.59120149e+00, 1.63089825e+00, 1.66878596e+00, 1.70489463e+00, 1.73925311e+00, 1.77188909e+00, 1.80282909e+00, 1.83209842e+00, 1.85972121e+00, 1.88572037e+00, 1.91011762e+00, 1.93293342e+00, 1.95418703e+00, 1.97389646e+00, 1.99207852e+00, 2.00874875e+00, 2.02392145e+00, 2.03760971e+00, 2.04982534e+00, 2.06057893e+00, 2.06987983e+00, 2.07773611e+00, 2.08415464e+00, 2.08914102e+00, 2.09269961e+00, 2.09483351e+00, 2.09554461e+00, 
0.00000000e+00, 9.46627187e-02, 1.86527503e-01, 2.75641768e-01, 3.62052800e-01, 4.45807690e-01, 5.26953270e-01, 6.05536052e-01, 6.81602165e-01, 7.55197298e-01, 8.26366639e-01, 8.95154818e-01, 9.61605857e-01, 1.02576311e+00, 1.08766924e+00, 1.14736611e+00, 1.20489482e+00, 1.26029560e+00, 1.31360779e+00, 1.36486984e+00, 1.41411920e+00, 1.46139236e+00, 1.50672476e+00, 1.55015084e+00, 1.59170392e+00, 1.63141625e+00, 1.66931896e+00, 1.70544205e+00, 1.73981437e+00, 1.77246361e+00, 1.80341626e+00, 1.83269765e+00, 1.86033190e+00, 1.88634192e+00, 1.91074940e+00, 1.93357482e+00, 1.95483744e+00, 1.97455528e+00, 1.99274511e+00, 2.00942249e+00, 2.02460173e+00, 2.03829590e+00, 2.05051682e+00, 2.06127509e+00, 2.07058002e+00, 2.07843974e+00, 2.08486107e+00, 2.08984963e+00, 2.09340977e+00, 2.09554461e+00, 2.09625601e+00, 
};

//project coordinates to left lower part of unit square
  double eps = 1e-8, r2 = TDatabase::ParamDB->P6;
  double y1, z1, minimal, value;
  int i, iy, iz;

  y1 = y0 + (y0-0.5)/(2*r2);
  if (y1>0.5)
      y1 = 0.5 - (y1-0.5);
  z1 = z0 + (z0-0.5)/(2*r2);
  if (z1>0.5)
      z1 = 0.5 - (z1-0.5);
  
  // find best fitting coordinates
  minimal = 1e10;
  for (i=0;i<n;i++)
  {
      if (fabs(y1-y[i]) < minimal)
      {
	  iy = i;
	  minimal = fabs(y1-y[i]);
      }
  }

  minimal = 1e10;
  for (i=0;i<n;i++)
  {
      if (fabs(z1-z[i]) < minimal)
      {
	  iz = i;
	  minimal = fabs(z1-z[i]);
      }
  }
  // compute value
  value = u1[iy*n+iz];
  if (fabs(x0-1)<eps)
      value = -value;
  //OutPut("bdry value " << x0 << " " << y0 << " " << z0 << " " << value<<endl);
  return value;
}

// ========================================================================
// initial solution
// ========================================================================

void InitialU1(double x, double y, double z, double *values)
{
  double eps = 1e-8, r2 = TDatabase::ParamDB->P6;

  values[0] = 0.0;

  // upper boundary
  if (fabs(z-1)<eps)
  {
    if ((fabs(x)>eps)&&(fabs(1-x)>eps)&&(fabs(y)>eps)&&(fabs(1-y)>eps))
      values[0] =  TDatabase::ParamDB->P5/TDatabase::ParamDB->BULK_u_infty;
  }
  // inflow from left
   if (fabs(x)<eps)
   {
       if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
	   values[0] = DirichletDataFromPoissonSolve(x,y,z);
   }
   // inflow from right 
   if (fabs(1 - x)<eps)
   {
       if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
	   values[0] = DirichletDataFromPoissonSolve(x,y,z);
   }
}

void InitialU2(double x, double y, double z, double *values)
{
  values[0] = 0;
}

void InitialU3(double x, double y, double z, double *values)
{
  double eps=1e-6;

  values[0] = 0;
/*  if (fabs(z)<eps)
   {
     if ((x-0.5)*(x-0.5)+(y-0.5)*(y-0.5) <= 2.0/256)
	 values[0] = -1;
	 }*/
}

void InitialP(double x, double y,  double z, double *values)
{
  values[0] = 0;
}

// ========================================================================
// exact solution
// ========================================================================
void ExactU1(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactU2(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactU3(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

void ExactP(double x, double y,  double z, double *values)
{
  values[0] = 0;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
}

// ========================================================================
// boundary conditions
// ========================================================================

// kind of boundary condition (for FE space needed)
void BoundCondition(double x, double y, double z, BoundCond &cond)
{
  double eps = 1e-8, r2 = TDatabase::ParamDB->P6;

  // enlarge the radius to cover all Neumann points
  // Dirichlet point in the enlarged region will be reset later
  // barycentres of respective grid cells must be covered
  r2 *= 1.7;
  cond = DIRICHLET;

  if (fabs(z)<eps)
   {
       // outflow 
       if ((fabs(x-0.5)<r2)&&(fabs(y-0.5)<r2))
       {
	   cond = NEUMANN;
	   TDatabase::ParamDB->INTERNAL_PROJECT_PRESSURE = 0;
	   //OutPut("neum " << x << " " << y << endl);
       }
   }
}

// value of boundary condition
void U1BoundValue(double x, double y, double z, double &value)
{
  double eps = 1e-8, r2 = TDatabase::ParamDB->P6;

  value = 0.0;

  // upper boundary
  if (fabs(z-1)<eps)
  {
    if ((fabs(x)>eps)&&(fabs(1-x)>eps)&&(fabs(y)>eps)&&(fabs(1-y)>eps))
      value =  TDatabase::ParamDB->P5/TDatabase::ParamDB->BULK_u_infty;
  }
  // inflow from left
   if (fabs(x)<eps)
   {
       if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
	   value = DirichletDataFromPoissonSolve(x,y,z);
   }
   // inflow from right 
   if (fabs(1 - x)<eps)
   {
       if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
	   value = DirichletDataFromPoissonSolve(x,y,z);
   }
}

// value of boundary condition
void U2BoundValue(double x, double y, double z, double &value)
{
  value = 0;
}

// value of boundary condition
void U3BoundValue(double x, double y, double z, double &value)
{
  double eps=1e-6;

  value = 0;
}

// ========================================================================
// coefficients for Stokes form: A, B1, B2, f1, f2
// ========================================================================
void LinCoeffs(int n_points, double *x, double *y, double *z,
               double **parameters, double **coeffs)
{
  static double eps = 1/TDatabase::ParamDB->RE_NR;
  int i;
  double *coeff;

  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];

    coeff[0] = eps;
    coeff[1] = 0; // f1
    coeff[2] = 0; // f2
    coeff[3] = 0; // f3
  }
}

// ========================================================================
// definitions for the substance A
// ========================================================================

// initial conditon
void InitialCondition_temp(double x, double y, double z, double *values)
{
  double eps=1e-6, r2 = TDatabase::ParamDB->P6;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double t0 = TDatabase::TimeDB->T0;

  if (t<t0)
    values[0] = 0;
  else
    {
	 values[0] = 0;
	 // inflow from left
	 if (fabs(x)<eps)
	 {
	     if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
		 values[0]  = 1.0;
	 }
    }
}

// kind of boundary condition (for FE space needed)
void BoundCondition_temp(double x, double y, double z, BoundCond &cond)
{
  double eps=1e-6, r2 = TDatabase::ParamDB->P6;

   if ((TDatabase::ParamDB->BULK_REACTION_DISC == GALERKIN) && 
      (TDatabase::ParamDB->BULK_SOLD_PARAMETER_TYPE == FEM_FCT_LIN))
       cond = NEUMANN;
   else
   {
       cond = NEUMANN;
       if (fabs(x)<eps)
       {
	   if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
	       cond = DIRICHLET;
       }
   }
}

// value of boundary condition
//void BoundValue_c_A(int BdComp, double Param, double &value)
void BoundValue_temp(double x, double y, double z, double &value)
{
  double eps=1e-6, r2 = TDatabase::ParamDB->P6;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double t0 = TDatabase::TimeDB->T0;

  if (t<t0)
    value = 0;
  else
    {
	 value = 0;
	// inflow from left
	if (fabs(x)<eps)
	{
	    if ((fabs(y-0.5)<r2+eps)&&(fabs(z-0.5)<r2+eps))
		value  = 1.0;
	}
    }
}

void NoCoeffs(int n_points, double *X, double *Y, double *Z,
              double **parameters, double **coeffs)
{
  return;
}

void BilinearCoeffs(int n_points, double *X, double *Y, double *Z,
                    double **parameters, double **coeffs)
{

  int i;
  double *coeff, *param;
  double x, y, z;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double L_infty = TDatabase::ParamDB->BULK_l_infty;
  double U_infty = TDatabase::ParamDB->BULK_u_infty;
  double C_infty = TDatabase::ParamDB->BULK_c_infty;
  double D_A = TDatabase::ParamDB->BULK_D_A;
  double k_r = TDatabase::ParamDB->BULK_k_r;
  double T_infty, eps, c;

  T_infty = L_infty/U_infty;
  eps = D_A/(L_infty*U_infty);
  c = k_r*C_infty * L_infty /U_infty;

  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    param = parameters[i];

    coeff[0] = eps;
    coeff[1] = param[1]; // u1
    coeff[2] = param[2]; // u2
    coeff[3] = param[3]; // u3
    coeff[4] = c * param[0];
    coeff[5] = 0;
    //OutPut(param[3] << endl); 
  }
}

/****************************************************************/
/* finds the nodes which are Neumann and should be Dirichlet    */
/* for FEM_FCT schemes                                          */
/****************************************************************/

void CheckWrongNeumannNodes_temp(TCollection *Coll, TFESpace3D *fespace,
				int &N_neum_to_diri, int* &neum_to_diri,
				double* &neum_to_diri_x, 
				double* &neum_to_diri_y,
				double* &neum_to_diri_z) 
{
  const int max_entries = 4096;
  int i, j, N_, min_val;
  int N_Cells, N_V, diri_counter = 0, found, diri_counter_1 = 0;
  int *global_numbers, *begin_index, *dof;
  int boundary_vertices[8], tmp_diri[max_entries]; 
  double x[8], y[8], z[8], eps = 1e-8, tmp_x[max_entries], tmp_y[max_entries], tmp_z[max_entries];
  double  r2 = TDatabase::ParamDB->P6;
  TBaseCell *cell;
  TVertex *vertex;
  FE3D CurrentElement;

  // number of mesh cells
  N_Cells = Coll->GetN_Cells();
  // array with global numbers of d.o.f.
  global_numbers = fespace->GetGlobalNumbers();
  // array which points to the beginning of the global numbers in
  // global_numbers for each mesh cell
  begin_index = fespace->GetBeginIndex();

  diri_counter = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_V = cell->GetN_Vertices();
    found = 0;
    for (j=0;j<N_V;j++)
    {
      // read coordinates of the mesh cell
      boundary_vertices[j] = 0;
      vertex = cell->GetVertex(j);
      vertex->GetCoords(x[j], y[j], z[j]);
      // vertex on the upper lid
      if ((fabs(x[j])<eps) && (fabs(y[j]-0.5)<r2+eps)&&(fabs(z[j]-0.5)<r2+eps))
      {
        boundary_vertices[j] = 1;
        found++;
      }
    }
    // no cell with face with vertex on the boundary
    if (found<3)
      continue;
    // finite element on the mesh cell
    CurrentElement = fespace->GetFE3D(i, cell);
    // number of basis functions (= number of d.o.f.)
    N_ = TFEDatabase3D::GetN_BaseFunctFromFE3D(CurrentElement);
    // the array which gives the mapping of the local to the global d.o.f.
    dof = global_numbers+begin_index[i];
    switch(CurrentElement)
    {
      // P_1, Q_1
      case C_P1_3D_T_A:
      case C_Q1_3D_H_A:
      case C_Q1_3D_H_M:
        for (j=0;j<N_V;j++)
        {
          // vertex on the boundary
          if (boundary_vertices[j])
          {
	      // tetrahedron
	      if (CurrentElement==C_P1_3D_T_A)
		  tmp_diri[diri_counter] = dof[j];
	      else
	      {
		  switch(j)
		  {
		      case 0:
		      case 1:
		      case 4:
		      case 5:
			  tmp_diri[diri_counter] = dof[j];
			  break;
		      case 2:
			  tmp_diri[diri_counter] = dof[3];
			  break;
		      case 3:
			  tmp_diri[diri_counter] = dof[2];
			  break;
		      case 6:
			  tmp_diri[diri_counter] = dof[7];
			  break;
		      case 7:
			  tmp_diri[diri_counter] = dof[6];
			  break;
		  }
	      }
	      if (diri_counter > max_entries)
	      {
		  OutPut("tmp_diri too short !!!"<<endl);
		  exit(4711);
	      }
	      if (fabs(x[j])<eps)
	      {
		  tmp_x[diri_counter] = x[j];
		  tmp_y[diri_counter] = y[j];
		  tmp_z[diri_counter] = z[j];
	      }
	      OutPut( tmp_diri[diri_counter] << " " <<
		      tmp_x[diri_counter] << " " << tmp_y[diri_counter] 
		      << " " << tmp_z[diri_counter]  << endl);
	      diri_counter++;
          }
        }
	OutPut(endl);
        break;
	default:
	    OutPut("CheckWrongNeumannNodes_temp not implemented for element "
		   << CurrentElement << endl);
	    OutPut("code can be run without CheckWrongNeumannNodes_temp, just delete the exit" << endl);
	    exit(4711);
    }
  }
  
  // condense
  for (i=0;i<diri_counter;i++)
  {
      if (tmp_diri[i] == -1)
	  continue;
      diri_counter_1++;
      for (j=i+1;j<diri_counter;j++)
      {
	  if (tmp_diri[i] == tmp_diri[j])
	  {
	      tmp_diri[j] = -1;
	  }
      }
  }
  
  OutPut("CheckWrongNeumannNodes_temp: N_neum_to_diri " << diri_counter_1 << endl);
  N_neum_to_diri = diri_counter_1;
  // allocate array for the indices
  neum_to_diri = new int[diri_counter_1];
  // allocate array for the corresponding x coordinate
  neum_to_diri_x = new double[diri_counter_1];
  // allocate array for the corresponding y coordinate
  neum_to_diri_y = new double[diri_counter_1];
  // allocate array for the corresponding z coordinate
  neum_to_diri_z = new double[diri_counter_1];

  // fill array and sort
  for (i=0;i<diri_counter_1;i++)
  {
    min_val = tmp_diri[0];
    found = 0;
    for (j=1;j<diri_counter;j++)
    {
      if ((tmp_diri[j]>-1) && ((tmp_diri[j] < min_val) ||
        (min_val == -1)))
      {
        min_val =  tmp_diri[j];
        found = j;
      }
    }
    neum_to_diri[i] = tmp_diri[found];
    neum_to_diri_x[i] = tmp_x[found];
    neum_to_diri_y[i] = tmp_y[found];
    neum_to_diri_z[i] = tmp_z[found];
    tmp_diri[found] = -1;
  }

  for (i=0;i<diri_counter_1;i++)
  {
    OutPut(i << " " << neum_to_diri[i] << " " << neum_to_diri_x[i]  <<
      " " << neum_to_diri_y[i]  <<  " " << neum_to_diri_z[i]  << endl);
  }
}

// ========================================================================
// definitions for the concentration
// ========================================================================

// initial conditon
void InitialCondition_conc(double x, double y, double z, double *values)
{
  values[0] = 0;
}

// kind of boundary condition (for FE space needed)
void BoundCondition_conc(double x, double y, double z, BoundCond &cond)
{
   cond = NEUMANN;
}

// value of boundary condition
void BoundValue_conc(double x, double y, double z, double &value)
{
   value = 0;
}

// param[3] : c_A
// param[4] : c_B
// param[5] : c_C (old)
// param[6] : r_g
void BilinearCoeffs_conc(int n_points, double *X, double *Y, double *Z,
                         double **parameters, double **coeffs)
{

  int i;
  double *coeff, *param;
  double x, y;
  double t = TDatabase::TimeDB->CURRENTTIME;
  double L_infty = TDatabase::ParamDB->BULK_l_infty;
  double U_infty = TDatabase::ParamDB->BULK_u_infty;
  double C_infty = TDatabase::ParamDB->BULK_c_infty;
  double C_c_infty_sat =  TDatabase::ParamDB->BULK_c_C_infty_sat;
  double C_g = TDatabase::ParamDB->BULK_C_g;
  double C_nuc = 15.33;
  double C_2 = TDatabase::ParamDB->BULK_C_2;
  double D_A = TDatabase::ParamDB->BULK_D_A;
  double d_p_0 = TDatabase::ParamDB->BULK_D_P_0;
  double d_p_max = TDatabase::ParamDB->BULK_D_P_MAX;
  double k_g = TDatabase::ParamDB->BULK_k_g;
  double k_r = TDatabase::ParamDB->BULK_k_r;
  double k_nuc =  TDatabase::ParamDB->BULK_k_nuc;
  double eps,  B_C_c, T_infty, lambda_chem, lambda_nuc;
  double d_p_min, C_c_infty, r_g;

  // compute derived quantities of the model
  T_infty = L_infty/U_infty;
  C_c_infty = C_c_infty_sat*exp(C_2/d_p_0);
  d_p_min = d_p_0/d_p_max;

  // compute coefficients of the equation
  eps = D_A/(L_infty*U_infty);
  lambda_chem = k_r*C_infty*C_infty*L_infty /(U_infty*C_c_infty);
  lambda_nuc = C_nuc*k_nuc*pow(d_p_0,3)*L_infty*pow(C_c_infty,4)/U_infty;
 
//OutPut(lambda_chem << " " << lambda_nuc << " ");
  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    param = parameters[i];

    if (param[5] < 1)
      B_C_c = 0;
    else
      B_C_c = pow(param[5] - 1,5);

    coeff[0] = eps;
    coeff[1] = param[0]; // u1
    coeff[2] = param[1]; // u2
    coeff[3] = param[2]; // u3
    coeff[4] = 0;
    // following script from 05/08/23 for r_g
    r_g = param[5] - C_c_infty_sat/C_c_infty;
    // with d_p - dependent definition of G(c_C,d_p)
    if (TDatabase::ParamDB->BULK_PB_DISC==2)
      r_g = 1;
    //if (r_g<0)
     // r_g = 0;
    coeff[5] = lambda_chem*param[3]*param[4]- lambda_nuc*B_C_c
	- r_g*param[6];//r_chem - r_nuc - r_g
  }
}

void CheckWrongNeumannNodes_conc(TCollection *Coll, TFESpace3D *fespace,
				int &N_neum_to_diri, int* &neum_to_diri,
				double* &neum_to_diri_x, 
				double* &neum_to_diri_y,
				double* &neum_to_diri_z) 
{
    N_neum_to_diri = 0;
    neum_to_diri = NULL;
    neum_to_diri_x = NULL;
    neum_to_diri_y = NULL;
    neum_to_diri_z = NULL;
}

void CheckNeumannNodesForVelocity(TCollection *Coll, TFESpace3D *fespace,
				  int &N_neum_to_diri, int* &neum_to_diri)
{
  int i, j, N_Cells, N_Active, N_V, found, N_, diri[MaxN_BaseFunctions2D];
  int *global_numbers, *begin_index, *dof,  *N_BaseFunct, diri_counter=0;
  int tmp_diri[1000], diri_counter_1 = 0, min_val;
  double x[8],y[8],z[8], eps = 1e-6, sx, sy, r2 = TDatabase::ParamDB->P6;
  double a = 1.51;
  //double a = sqrt(2.0);
  TBaseCell *cell;
  TVertex *vertex;
  FE3D CurrentElement;

  // number of mesh cells
  N_Cells = Coll->GetN_Cells();
  // array with global numbers of d.o.f.
  global_numbers = fespace->GetGlobalNumbers();
  // array which points to the beginning of the global numbers in
  // global_numbers for each mesh cell
  begin_index = fespace->GetBeginIndex();
  // get number of active dof
  N_Active =  fespace->GetActiveBound();
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_V = cell->GetN_Vertices();
    found = 0;
    for (j=0;j<N_V;j++)
    {
      // read coordinates of the mesh cell
      vertex = cell->GetVertex(j);
      vertex->GetCoords(x[j], y[j], z[j]);
      if (fabs(z[j])<eps)
      {
	      found++;
      }
    }
    // no cell with face with vertex in the outflow region
    if (!found) 
	continue;
    // finite element on the mesh cell
    CurrentElement = fespace->GetFE3D(i, cell);
    // number of basis functions (= number of d.o.f.)
    N_ = TFEDatabase3D::GetN_BaseFunctFromFE3D(CurrentElement);
    // the array which gives the mapping of the local to the global d.o.f.
    dof = global_numbers+begin_index[i];
    switch(CurrentElement)
    {
	// Q_2
	case C_Q2_3D_H_A:
	case C_Q2_3D_H_M:
	    // all vertices are in the outlet, NEUMANN b.c. is correct for all dof
	    //if (found == 4)
	    //	break;
	    for (j=0;j<N_;j++)
		diri[j] = -1;
	    for (j=0;j<N_V;j++)
	    {
		if (fabs(z[j])<eps)
		{
		    // assume that the vortices on the  bottom are from 0 to 3
		    // this should be generalized later
		    if (j>3)
		    {
			OutPut("CheckNeumannNodesForVelocity: index too large " << j << endl);
			exit(4711);
		    }
		}
	    }
	    // basis fct. 0 is at vertex 0
	    if ((fabs(x[0]-0.5)>r2*a) || (fabs(y[0]-0.5)>r2*a))
		diri[0] = dof[0];
	    // basis fct. 1 is between vertices 0 and 1
	    sx = (x[0]+x[1])/2.0;
	    sy = (y[0]+y[1])/2.0;
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[1] = dof[1];
	    // basis fct. 2 is at vertex 1
	    if ((fabs(x[1]-0.5)>r2*a) || (fabs(y[1]-0.5)>r2*a))
		//if ((x[1]-0.5)*(x[1]-0.5)+(y[1]-0.5)*(y[1]-0.5)>2.0*r2)
		diri[2] = dof[2];
	    // basis fct. 3 is between vertices 0 and 3
	    sx = (x[0]+x[3])/2.0;
	    sy = (y[0]+y[3])/2.0;
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[3] = dof[3];
	    // basis fct. 4 is at the barycenter
	    sx = (x[0]+x[1]+x[2]+x[3])/4.0;
	    sy = (y[0]+y[1]+y[2]+y[3])/4.0;
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[4] = dof[4];
	    // basis fct. 5 is between vertices 1 and 2
	    sx = (x[1]+x[2])/2.0;
	    sy = (y[1]+y[2])/2.0;
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[5] = dof[5];
	    // basis fct. 6 is at vertex 3
	    sx = x[3];
	    sy = y[3];
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[6] = dof[6];
	    // basis fct. 7 is between vertices 2 and 3
	    sx = (x[2]+x[3])/2.0;
	    sy = (y[2]+y[3])/2.0;
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[7] = dof[7];
	    // basis fct. 8 is at vertex 2
	    sx = x[2];
	    sy = y[2];
	    if ((fabs(sx-0.5)>r2*a) || (fabs(sy-0.5)>r2*a))
		//if ((sx-0.5)*(sx-0.5)+(sy-0.5)*(sy-0.5)>2.0*r2)
		diri[8] = dof[8];
	    for (j=0;j<N_;j++)
	    {
		if (diri[j]>-1)
		{
		    if ( diri[j] < N_Active)
		    {
			tmp_diri[diri_counter] = diri[j];
			diri_counter++;
			if (diri_counter > 1000)
			{
			    OutPut("CheckNeumannNodesForVelocity: tmp_diri too short !!!"<<endl);
			    exit(4711);
			}
		    }
		}			
	    }
	    break;
	default:
	    OutPut("CheckNeumannNodesForVelocity not implemented for element "
		   << CurrentElement << endl);
	    OutPut("code can be run without CheckNeumannNodesForVelocity, just delete the exit" << endl);
	    exit(4711);
    }	    
  }
  // condense
  for (i=0;i<diri_counter;i++)
  {
      if (tmp_diri[i] == -1)
	  continue;
      diri_counter_1++;
      for (j=i+1;j<diri_counter;j++)
      {
	  if (tmp_diri[i] == tmp_diri[j])
	  {
	      tmp_diri[j] = -1;
	  }
      }
  }
  OutPut("CheckNeumannNodesForVelocity: N_neum_to_diri " << diri_counter_1 << endl);
  N_neum_to_diri = diri_counter_1;
  // allocate array for the indices
  neum_to_diri = new int[diri_counter_1];
  // fill array and sort
  for (i=0;i<diri_counter_1;i++)
  {
      min_val = tmp_diri[0];
      found = 0;
      for (j=1;j<diri_counter;j++)
      {
	  if ((tmp_diri[j]>0) && ((tmp_diri[j] < min_val) || 
				  (min_val == -1)))
	  {
	       min_val =  tmp_diri[j];
	       found = j;
	  }
      }
      neum_to_diri[i] = tmp_diri[found];
      tmp_diri[found] = -1;
  }

//  for (i=0;i<diri_counter_1;i++)
//  {
//      OutPut(i << " " << neum_to_diri[i] << endl);
//  }
}

// set Neumann nodes which are outside the outflow to Dirichlet

void SetDirichletNodesFromNeumannNodes(TSquareMatrix3D **SQMATRICES, 
				       TMatrix3D **MATRICES,
				       double *rhs,
				       int N_U,
				       int N_neum_to_diri,
				       int *neum_to_diri)
{
    TSquareMatrix3D *MatrixA11;
    TMatrix3D *Matrix_B;
    double *Entries_A;
    int i, j, l, l0, l1, index, *RowPtr_A, *KCol_A;
    
    switch(TDatabase::ParamDB->NSTYPE)
    {
	case 2:
	    MatrixA11 = SQMATRICES[0];
	    RowPtr_A      = MatrixA11->GetRowPtr();
	    KCol_A        = MatrixA11->GetKCol();
	    Entries_A     = MatrixA11->GetEntries();
	    for (i=0;i<N_neum_to_diri;i++)
	    {
		index = neum_to_diri[i];
		l0 = RowPtr_A[index];
		l1 = RowPtr_A[index+1];
		for (l=l0;l<l1;l++)
		{
		    // diagonal entry
		    if (KCol_A[l]==index)
			Entries_A[l] = 1;  
		    else
			Entries_A[l] = 0;
			}  
            }
	    break;
	case 1:
	case 3:
	    OutPut("SetDirichletNodesFromNeumannNodes does not work for NSTYPE: "<<
		   TDatabase::ParamDB->NSTYPE << endl);
	    exit(4711);
	default:
	    OutPut("SetDirichletNodesFromNeumannNodes not implemented"<<endl);
	    exit(4711);
    }

    for (j=0;j<3;j++)
    {
	Matrix_B = MATRICES[j];
	RowPtr_A      = Matrix_B->GetRowPtr();
	Entries_A     = Matrix_B->GetEntries();
	for (i=0;i<N_neum_to_diri;i++)
	{
	    index = neum_to_diri[i];
	    l0 = RowPtr_A[index];
	    l1 = RowPtr_A[index+1];
	    for (l=l0;l<l1;l++)
		Entries_A[l] = 0;
	}
    }
    for (j=0;j<3;j++)
    {
	l0 = j* N_U;
	for (i=0;i<N_neum_to_diri;i++)
	{
	    index = neum_to_diri[i] + l0;
	    rhs[index] = 0;
	}
    }
}
